{"ast":null,"code":"var _jsxFileName = \"D:\\\\project modifications\\\\sportshub\\\\client\\\\src\\\\component\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\n//\n// const CartContext = createContext();\n//\n// const initialState = {\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\n// }\n//\n//\n// const cartReducer = (state, action) =>{\n//     switch(action.type){\n//         case 'ADD_ITEM': {\n//             //identify exisitng item\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\n//             let newCart;\n//\n//             if(existingItem){\n//                 newCart = state.cart.map(item =>\n//                     item.id === action.payload.id\n//                         ? {...item, quantity: item.quantity + 1}\n//                         : item\n//                 );\n//             }else {\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\n//             }\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'REMOVE_ITEM':{\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'INCREMENT_ITEM': {\n//             const newCart = state.cart.map(item=>\n//                 item.id === action.payload.id\n//                     ? {...item, quantity: item.quantity + 1}\n//                     :item\n//             );\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'DECREMENT_ITEM': {\n//             const newCart = state.cart.map(item =>\n//                 item.id === action.payload.id && item.quantity > 1\n//                     ? {...item, quantity: item.quantity -1}\n//                     :item\n//             )\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'CLEAR_CART': {\n//             localStorage.removeItem('cart');\n//             return {...state, cart:[]};\n//         }\n//         default:\n//             return state;\n//     }\n// };\n//\n//\n//\n//\n// export const CartProvider = ({children}) => {\n//\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\n//\n//\n//     useEffect(() =>{\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\n//     }, [state.cart]);\n//\n//     return (\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n//\n// export const useCart = () => useContext(CartContext);\n//\n//\n\n//\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\n//\n// const CartContext = createContext();\n//\n// const initialState = {\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\n// }\n//\n//\n// const cartReducer = (state, action) =>{\n//     switch(action.type){\n//         case 'ADD_ITEM': {\n//             //identify exisitng item\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\n//             let newCart;\n//\n//             if(existingItem){\n//                 newCart = state.cart.map(item =>\n//                     item.id === action.payload.id\n//                         ? {...item, quantity: item.quantity + 1}\n//                         : item\n//                 );\n//             }else {\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\n//             }\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'REMOVE_ITEM':{\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'INCREMENT_ITEM': {\n//             const newCart = state.cart.map(item=>\n//                 item.id === action.payload.id\n//                     ? {...item, quantity: item.quantity + 1}\n//                     :item\n//             );\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'DECREMENT_ITEM': {\n//             const newCart = state.cart.map(item =>\n//                 item.id === action.payload.id && item.quantity > 1\n//                     ? {...item, quantity: item.quantity -1}\n//                     :item\n//             )\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'CLEAR_CART': {\n//             localStorage.removeItem('cart');\n//             return {...state, cart:[]};\n//         }\n//         default:\n//             return state;\n//     }\n// };\n//\n//\n//\n//\n// export const CartProvider = ({children}) => {\n//\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\n//\n//\n//     useEffect(() =>{\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\n//     }, [state.cart]);\n//\n//     return (\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n//\n// export const useCart = () => useContext(CartContext);\n//\n\n//\n// import React, { createContext, useReducer, useContext, useEffect } from \"react\";\n//\n// const CartContext = createContext();\n//\n// const cartReducer = (state, action) => {\n//     switch (action.type) {\n//         case 'ADD_ITEM': {\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\n//             let newCart;\n//\n//             if (existingItem) {\n//                 newCart = state.cart.map(item =>\n//                     item.id === action.payload.id\n//                         ? { ...item, quantity: item.quantity + 1 }\n//                         : item\n//                 );\n//             } else {\n//                 newCart = [...state.cart, { ...action.payload, quantity: 1 }];\n//             }\n//\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\n//             return { ...state, cart: newCart };\n//         }\n//         case 'REMOVE_ITEM': {\n//             const newCart = state.cart.filter(item => item.id !== action.payload.id);\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\n//             return { ...state, cart: newCart };\n//         }\n//         case 'CLEAR_CART': {\n//             localStorage.removeItem(`cart_${state.userId}`);\n//             return { ...state, cart: [] };\n//         }\n//         case 'SET_USER': {\n//             const storedCart = JSON.parse(localStorage.getItem(`cart_${action.payload}`)) || [];\n//             return { ...state, userId: action.payload, cart: storedCart };\n//         }\n//         default:\n//             return state;\n//     }\n// };\n//\n// export const CartProvider = ({ children }) => {\n//     const [state, dispatch] = useReducer(cartReducer, { cart: [], userId: null });\n//\n//     useEffect(() => {\n//         if (state.userId) {\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(state.cart));\n//         }\n//     }, [state.cart, state.userId]);\n//\n//     return (\n//         <CartContext.Provider value={{ cart: state.cart, dispatch, setUser: (id) => dispatch({ type: 'SET_USER', payload: id }) }}>\n//             {children}\n//         </CartContext.Provider>\n//     );\n// };\n//\n// export const useCart = () => useContext(CartContext);\n//\n\nimport React, { createContext, useReducer, useEffect, useContext } from \"react\";\nimport ApiService from \"../../service/ApiService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_CART':\n      return action.payload;\n    case 'ADD_ITEM':\n      return [...state, action.payload];\n    case 'REMOVE_ITEM':\n      return state.filter(item => item.id !== action.payload.id);\n    case 'UPDATE_ITEM':\n      return state.map(item => item.id === action.payload.id ? {\n        ...item,\n        quantity: action.payload.quantity\n      } : item);\n    case 'CLEAR_CART':\n      return [];\n    default:\n      return state;\n  }\n};\nexport const CartProvider = ({\n  children,\n  user\n}) => {\n  _s();\n  const [cart, dispatch] = useReducer(cartReducer, []);\n  useEffect(() => {\n    if (user) {\n      ApiService.getCartByUserId(user.id).then(response => {\n        dispatch({\n          type: 'SET_CART',\n          payload: response.data\n        });\n      }).catch(error => console.error(\"Failed to fetch cart\", error));\n    }\n  }, [user]);\n  useEffect(() => {\n    if (user) {\n      localStorage.setItem('cart', JSON.stringify(cart));\n      ApiService.updateCart(user.id, cart);\n    }\n  }, [cart, user]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"14Xujp8IvOnYQVNGY1GqUis0YV0=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useEffect","useContext","ApiService","jsxDEV","_jsxDEV","CartContext","cartReducer","state","action","type","payload","filter","item","id","map","quantity","CartProvider","children","user","_s","cart","dispatch","getCartByUserId","then","response","data","catch","error","console","localStorage","setItem","JSON","stringify","updateCart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["D:/project modifications/sportshub/client/src/component/context/CartContext.js"],"sourcesContent":["// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\r\n//\r\n// const CartContext = createContext();\r\n//\r\n// const initialState = {\r\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\r\n// }\r\n//\r\n//\r\n// const cartReducer = (state, action) =>{\r\n//     switch(action.type){\r\n//         case 'ADD_ITEM': {\r\n//             //identify exisitng item\r\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n//             let newCart;\r\n//\r\n//             if(existingItem){\r\n//                 newCart = state.cart.map(item =>\r\n//                     item.id === action.payload.id\r\n//                         ? {...item, quantity: item.quantity + 1}\r\n//                         : item\r\n//                 );\r\n//             }else {\r\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\r\n//             }\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'REMOVE_ITEM':{\r\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'INCREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item=>\r\n//                 item.id === action.payload.id\r\n//                     ? {...item, quantity: item.quantity + 1}\r\n//                     :item\r\n//             );\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'DECREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item =>\r\n//                 item.id === action.payload.id && item.quantity > 1\r\n//                     ? {...item, quantity: item.quantity -1}\r\n//                     :item\r\n//             )\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'CLEAR_CART': {\r\n//             localStorage.removeItem('cart');\r\n//             return {...state, cart:[]};\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n//\r\n//\r\n//\r\n//\r\n// export const CartProvider = ({children}) => {\r\n//\r\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\r\n//\r\n//\r\n//     useEffect(() =>{\r\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\r\n//     }, [state.cart]);\r\n//\r\n//     return (\r\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     )\r\n// }\r\n//\r\n// export const useCart = () => useContext(CartContext);\r\n//\r\n//\r\n\r\n//\r\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\r\n//\r\n// const CartContext = createContext();\r\n//\r\n// const initialState = {\r\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\r\n// }\r\n//\r\n//\r\n// const cartReducer = (state, action) =>{\r\n//     switch(action.type){\r\n//         case 'ADD_ITEM': {\r\n//             //identify exisitng item\r\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n//             let newCart;\r\n//\r\n//             if(existingItem){\r\n//                 newCart = state.cart.map(item =>\r\n//                     item.id === action.payload.id\r\n//                         ? {...item, quantity: item.quantity + 1}\r\n//                         : item\r\n//                 );\r\n//             }else {\r\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\r\n//             }\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'REMOVE_ITEM':{\r\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'INCREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item=>\r\n//                 item.id === action.payload.id\r\n//                     ? {...item, quantity: item.quantity + 1}\r\n//                     :item\r\n//             );\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'DECREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item =>\r\n//                 item.id === action.payload.id && item.quantity > 1\r\n//                     ? {...item, quantity: item.quantity -1}\r\n//                     :item\r\n//             )\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'CLEAR_CART': {\r\n//             localStorage.removeItem('cart');\r\n//             return {...state, cart:[]};\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n//\r\n//\r\n//\r\n//\r\n// export const CartProvider = ({children}) => {\r\n//\r\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\r\n//\r\n//\r\n//     useEffect(() =>{\r\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\r\n//     }, [state.cart]);\r\n//\r\n//     return (\r\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     )\r\n// }\r\n//\r\n// export const useCart = () => useContext(CartContext);\r\n//\r\n\r\n//\r\n// import React, { createContext, useReducer, useContext, useEffect } from \"react\";\r\n//\r\n// const CartContext = createContext();\r\n//\r\n// const cartReducer = (state, action) => {\r\n//     switch (action.type) {\r\n//         case 'ADD_ITEM': {\r\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n//             let newCart;\r\n//\r\n//             if (existingItem) {\r\n//                 newCart = state.cart.map(item =>\r\n//                     item.id === action.payload.id\r\n//                         ? { ...item, quantity: item.quantity + 1 }\r\n//                         : item\r\n//                 );\r\n//             } else {\r\n//                 newCart = [...state.cart, { ...action.payload, quantity: 1 }];\r\n//             }\r\n//\r\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\r\n//             return { ...state, cart: newCart };\r\n//         }\r\n//         case 'REMOVE_ITEM': {\r\n//             const newCart = state.cart.filter(item => item.id !== action.payload.id);\r\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\r\n//             return { ...state, cart: newCart };\r\n//         }\r\n//         case 'CLEAR_CART': {\r\n//             localStorage.removeItem(`cart_${state.userId}`);\r\n//             return { ...state, cart: [] };\r\n//         }\r\n//         case 'SET_USER': {\r\n//             const storedCart = JSON.parse(localStorage.getItem(`cart_${action.payload}`)) || [];\r\n//             return { ...state, userId: action.payload, cart: storedCart };\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n//\r\n// export const CartProvider = ({ children }) => {\r\n//     const [state, dispatch] = useReducer(cartReducer, { cart: [], userId: null });\r\n//\r\n//     useEffect(() => {\r\n//         if (state.userId) {\r\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(state.cart));\r\n//         }\r\n//     }, [state.cart, state.userId]);\r\n//\r\n//     return (\r\n//         <CartContext.Provider value={{ cart: state.cart, dispatch, setUser: (id) => dispatch({ type: 'SET_USER', payload: id }) }}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     );\r\n// };\r\n//\r\n// export const useCart = () => useContext(CartContext);\r\n//\r\n\r\n\r\nimport React, { createContext, useReducer, useEffect, useContext } from \"react\";\r\nimport ApiService from \"../../service/ApiService\";\r\n\r\nconst CartContext = createContext();\r\n\r\nconst cartReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'SET_CART':\r\n            return action.payload;\r\n        case 'ADD_ITEM':\r\n            return [...state, action.payload];\r\n        case 'REMOVE_ITEM':\r\n            return state.filter(item => item.id !== action.payload.id);\r\n        case 'UPDATE_ITEM':\r\n            return state.map(item =>\r\n                item.id === action.payload.id ? { ...item, quantity: action.payload.quantity } : item\r\n            );\r\n        case 'CLEAR_CART':\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const CartProvider = ({ children, user }) => {\r\n    const [cart, dispatch] = useReducer(cartReducer, []);\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            ApiService.getCartByUserId(user.id)\r\n                .then(response => {\r\n                    dispatch({ type: 'SET_CART', payload: response.data });\r\n                })\r\n                .catch(error => console.error(\"Failed to fetch cart\", error));\r\n        }\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            localStorage.setItem('cart', JSON.stringify(cart));\r\n            ApiService.updateCart(user.id, cart);\r\n        }\r\n    }, [cart, user]);\r\n\r\n    return (\r\n        <CartContext.Provider value={{ cart, dispatch }}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useCart = () => {\r\n    return useContext(CartContext);\r\n};\r\n\r\n\r\n"],"mappingsaAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC/E,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,MAAMQ,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACnC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,UAAU;MACX,OAAOD,MAAM,CAACE,OAAO;IACzB,KAAK,UAAU;MACX,OAAO,CAAC,GAAGH,KAAK,EAAEC,MAAM,CAACE,OAAO,CAAC;IACrC,KAAK,aAAa;MACd,OAAOH,KAAK,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,CAACG,EAAE,CAAC;IAC9D,KAAK,aAAa;MACd,OAAON,KAAK,CAACO,GAAG,CAACF,IAAI,IACjBA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,CAACG,EAAE,GAAG;QAAE,GAAGD,IAAI;QAAEG,QAAQ,EAAEP,MAAM,CAACE,OAAO,CAACK;MAAS,CAAC,GAAGH,IACrF,CAAC;IACL,KAAK,YAAY;MACb,OAAO,EAAE;IACb;MACI,OAAOL,KAAK;EACpB;AACJ,CAAC;AAED,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,IAAI,EAAEC,QAAQ,CAAC,GAAGtB,UAAU,CAACO,WAAW,EAAE,EAAE,CAAC;EAEpDN,SAAS,CAAC,MAAM;IACZ,IAAIkB,IAAI,EAAE;MACNhB,UAAU,CAACoB,eAAe,CAACJ,IAAI,CAACL,EAAE,CAAC,CAC9BU,IAAI,CAACC,QAAQ,IAAI;QACdH,QAAQ,CAAC;UAAEZ,IAAI,EAAE,UAAU;UAAEC,OAAO,EAAEc,QAAQ,CAACC;QAAK,CAAC,CAAC;MAC1D,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;IACrE;EACJ,CAAC,EAAE,CAACT,IAAI,CAAC,CAAC;EAEVlB,SAAS,CAAC,MAAM;IACZ,IAAIkB,IAAI,EAAE;MACNW,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC,CAAC;MAClDlB,UAAU,CAAC+B,UAAU,CAACf,IAAI,CAACL,EAAE,EAAEO,IAAI,CAAC;IACxC;EACJ,CAAC,EAAE,CAACA,IAAI,EAAEF,IAAI,CAAC,CAAC;EAEhB,oBACId,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAEf,IAAI;MAAEC;IAAS,CAAE;IAAAJ,QAAA,EAC3CA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACpB,EAAA,CAzBWH,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AA2BzB,OAAO,MAAMyB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,OAAOzC,UAAU,CAACI,WAAW,CAAC;AAClC,CAAC;AAACqC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}