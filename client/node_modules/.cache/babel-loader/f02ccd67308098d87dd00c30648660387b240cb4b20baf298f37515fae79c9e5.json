{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ECS\\\\Desktop\\\\Projects\\\\sportshub\\\\client\\\\src\\\\component\\\\pages\\\\AddressPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import ApiService from \"../../service/ApiService\";\n// import '../../style/addressPage.css';\n//\n// const AddressPage = () => {\n//     const [address, setAddress] = useState({\n//         street: '',\n//         city: '',\n//         state: '',\n//         zipCode: '',\n//         country: ''\n//     });\n//\n//     const [error, setError] = useState(null);\n//     const navigate = useNavigate();\n//     const location = useLocation();\n//\n//     useEffect(() => {\n//         if (location.pathname === '/edit-address') {\n//             fetchUserInfo();\n//         }\n//     }, [location.pathname]);\n//\n//     const fetchUserInfo = async () => {\n//         try {\n//             const response = await ApiService.getLoggedInUserInfo();\n//             if (response.user.address) {\n//                 setAddress(response.user.address);\n//             }\n//         } catch (error) {\n//             setError(error.response?.data?.message || error.message || \"Unable to fetch user information\");\n//         }\n//     };\n//\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n//         setAddress((prevAddress) => ({\n//             ...prevAddress,\n//             [name]: value\n//         }));\n//     };\n//\n//     const handSubmit = async (e) => {\n//         e.preventDefault();\n//         try {\n//             await ApiService.saveAddress(address);\n//             navigate(\"/profile\");\n//         } catch (error) {\n//             setError(error.response?.data?.message || error.message || \"Failed to save/update address\");\n//         }\n//     };\n//\n//     return (\n//         <div className=\"address-page\">\n//             <h2>{location.pathname === '/edit-address' ? 'Edit Address' : \"Add Address\"}</h2>\n//             {error && <p className=\"error-message\">{error}</p>}\n//\n//             <form onSubmit={handSubmit}>\n//                 <label>\n//                     Street:\n//                     <input\n//                         type=\"text\"\n//                         name=\"street\"\n//                         value={address.street}\n//                         onChange={handleChange}\n//                         required\n//                     />\n//                 </label>\n//                 <label>\n//                     City:\n//                     <input\n//                         type=\"text\"\n//                         name=\"city\"\n//                         value={address.city}\n//                         onChange={handleChange}\n//                         required\n//                     />\n//                 </label>\n//                 <label>\n//                     State:\n//                     <input\n//                         type=\"text\"\n//                         name=\"state\"\n//                         value={address.state}\n//                         onChange={handleChange}\n//                         required\n//                     />\n//                 </label>\n//\n//                 <label>\n//                     Zip Code:\n//                     <input\n//                         type=\"text\"\n//                         name=\"zipCode\"\n//                         value={address.zipCode}\n//                         onChange={handleChange}\n//                         required\n//                     />\n//                 </label>\n//\n//                 <label>\n//                     Country:\n//                     <input\n//                         type=\"text\"\n//                         name=\"country\"\n//                         value={address.country}\n//                         onChange={handleChange}\n//                         required\n//                     />\n//                 </label>\n//                 <button type=\"submit\">\n//                     {location.pathname === '/edit-address' ? 'Edit Address' : \"Save Address\"}\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// };\n//\n// export default AddressPage;\n\n//////////////////////////////////////\n\n//\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import ApiService from \"../../service/ApiService\";\n// import '../../style/addressPage.css';\n// import MapComponent from \"../future features/MapComponent\";\n//\n// const AddressPage = () => {\n//     const [address, setAddress] = useState({\n//         street: '',\n//         city: '',\n//         state: '',\n//         zipCode: '',\n//         country: ''\n//     });\n//\n//     const [error, setError] = useState(null);\n//     const navigate = useNavigate();\n//     const location = useLocation();\n//\n//     useEffect(() => {\n//         if (location.pathname === '/edit-address') {\n//             fetchUserInfo();\n//         }\n//     }, [location.pathname]);\n//\n//     const fetchUserInfo = async () => {\n//         try {\n//             const response = await ApiService.getLoggedInUserInfo();\n//             if (response.user.address) {\n//                 setAddress(response.user.address);\n//             }\n//         } catch (error) {\n//             setError(error.response?.data?.message || error.message || \"Unable to fetch user information\");\n//         }\n//     };\n//\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n//         setAddress((prevAddress) => ({\n//             ...prevAddress,\n//             [name]: value\n//         }));\n//     };\n//\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         try {\n//             await ApiService.saveAddress(address);\n//             navigate(\"/cart\", { state: { addressSaved: true } }); // Pass a flag to indicate that the address is saved\n//         } catch (error) {\n//             setError(error.response?.data?.message || error.message || \"Failed to save/update address\");\n//         }\n//     };\n//\n//     return (\n//         <div className=\"address-page\">\n//             <h2>{location.pathname === '/edit-address' ? 'Edit Address' : \"Add Address\"}</h2>\n//             {error && <p className=\"error-message\">{error}</p>}\n//\n//             <form onSubmit={handleSubmit}>\n//                 <label>\n//                     Street:\n//                     <input type=\"text\"\n//                            name=\"street\"\n//                            value={address.street}\n//                            onChange={handleChange}\n//                            required />\n//                 </label>\n//                 <label>\n//                     City:\n//                     <input type=\"text\"\n//                            name=\"city\"\n//                            value={address.city}\n//                            onChange={handleChange}\n//                            required />\n//                 </label>\n//                 <label>\n//                     State:\n//                     <input type=\"text\"\n//                            name=\"state\"\n//                            value={address.state}\n//                            onChange={handleChange}\n//                            required />\n//                 </label>\n//                 <label>\n//                     Zip Code:\n//                     <input type=\"text\"\n//                            name=\"zipCode\"\n//                            value={address.zipCode}\n//                            onChange={handleChange}\n//                            required />\n//                 </label>\n//                 <label>\n//                     Country:\n//                     <input type=\"text\"\n//                            name=\"country\"\n//                            value={address.country}\n//                            onChange={handleChange}\n//                            required />\n//                 </label>\n//                 <button type=\"submit\">{location.pathname === '/edit-address' ? 'Edit Address' : \"Save Address\"}</button>\n//             </form>\n//\n//             <MapComponent />\n//         </div>\n//     );\n// };\n//\n// export default AddressPage;\n//\n//\n\n// AddressPage.js\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport ApiService from \"../../service/ApiService\";\nimport MapComponent from '../future features/MapComponent'; // Adjust the path as needed\nimport '../../style/addressPage.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddressPage = () => {\n  _s();\n  const [address, setAddress] = useState({\n    street: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: ''\n  });\n  const [coordinates, setCoordinates] = useState({\n    lat: null,\n    lng: null\n  });\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n  useEffect(() => {\n    if (location.pathname === '/edit-address') {\n      fetchUserInfo();\n    }\n  }, [location.pathname]);\n  const fetchUserInfo = async () => {\n    try {\n      const response = await ApiService.getLoggedInUserInfo();\n      if (response.user.address) {\n        setAddress(response.user.address);\n        // Get coordinates when editing address\n        await fetchCoordinates(response.user.address);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || \"Unable to fetch user information\");\n    }\n  };\n  const fetchCoordinates = async address => {\n    const {\n      street,\n      city,\n      state,\n      country\n    } = address;\n    const fullAddress = `${street}, ${city}, ${state}, ${country}`;\n    try {\n      const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json`, {\n        params: {\n          q: fullAddress,\n          key: '8f741c7ce35544609646455395ac00a9',\n          // Your OpenCage API key\n          limit: 1\n        }\n      });\n      const {\n        lat,\n        lng\n      } = response.data.results[0].geometry;\n      setCoordinates({\n        lat,\n        lng\n      });\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n    }\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setAddress(prevAddress => ({\n      ...prevAddress,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await ApiService.saveAddress(address);\n      await fetchCoordinates(address); // Fetch coordinates after saving\n      navigate(\"/cart\", {\n        state: {\n          addressSaved: true,\n          coordinates\n        }\n      }); // Pass coordinates\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || \"Failed to save/update address\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"address-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: location.pathname === '/edit-address' ? 'Edit Address' : \"Add Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Street:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"street\",\n          value: address.street,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"City:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"city\",\n          value: address.city,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"State:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"state\",\n          value: address.state,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Zip Code:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"zipCode\",\n          value: address.zipCode,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Country:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"country\",\n          value: address.country,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: location.pathname === '/edit-address' ? 'Edit Address' : \"Save Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }, this), coordinates.lat && coordinates.lng && /*#__PURE__*/_jsxDEV(MapComponent, {\n      position: [coordinates.lat, coordinates.lng]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 9\n  }, this);\n};\n_s(AddressPage, \"ohNlwZoqkmvNyfoAkrKyDa6G3to=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AddressPage;\nexport default AddressPage;\nvar _c;\n$RefreshReg$(_c, \"AddressPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","ApiService","MapComponent","axios","jsxDEV","_jsxDEV","AddressPage","_s","address","setAddress","street","city","state","zipCode","country","coordinates","setCoordinates","lat","lng","error","setError","navigate","location","pathname","fetchUserInfo","response","getLoggedInUserInfo","user","fetchCoordinates","_error$response","_error$response$data","data","message","fullAddress","get","params","q","key","limit","results","geometry","console","handleChange","e","name","value","target","prevAddress","handleSubmit","preventDefault","saveAddress","addressSaved","_error$response2","_error$response2$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","required","position","_c","$RefreshReg$"],"sources":["C:/Users/ECS/Desktop/Projects/sportshub/client/src/component/pages/AddressPage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n// import ApiService from \"../../service/ApiService\";\r\n// import '../../style/addressPage.css';\r\n//\r\n// const AddressPage = () => {\r\n//     const [address, setAddress] = useState({\r\n//         street: '',\r\n//         city: '',\r\n//         state: '',\r\n//         zipCode: '',\r\n//         country: ''\r\n//     });\r\n//\r\n//     const [error, setError] = useState(null);\r\n//     const navigate = useNavigate();\r\n//     const location = useLocation();\r\n//\r\n//     useEffect(() => {\r\n//         if (location.pathname === '/edit-address') {\r\n//             fetchUserInfo();\r\n//         }\r\n//     }, [location.pathname]);\r\n//\r\n//     const fetchUserInfo = async () => {\r\n//         try {\r\n//             const response = await ApiService.getLoggedInUserInfo();\r\n//             if (response.user.address) {\r\n//                 setAddress(response.user.address);\r\n//             }\r\n//         } catch (error) {\r\n//             setError(error.response?.data?.message || error.message || \"Unable to fetch user information\");\r\n//         }\r\n//     };\r\n//\r\n//     const handleChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         setAddress((prevAddress) => ({\r\n//             ...prevAddress,\r\n//             [name]: value\r\n//         }));\r\n//     };\r\n//\r\n//     const handSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         try {\r\n//             await ApiService.saveAddress(address);\r\n//             navigate(\"/profile\");\r\n//         } catch (error) {\r\n//             setError(error.response?.data?.message || error.message || \"Failed to save/update address\");\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <div className=\"address-page\">\r\n//             <h2>{location.pathname === '/edit-address' ? 'Edit Address' : \"Add Address\"}</h2>\r\n//             {error && <p className=\"error-message\">{error}</p>}\r\n//\r\n//             <form onSubmit={handSubmit}>\r\n//                 <label>\r\n//                     Street:\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         name=\"street\"\r\n//                         value={address.street}\r\n//                         onChange={handleChange}\r\n//                         required\r\n//                     />\r\n//                 </label>\r\n//                 <label>\r\n//                     City:\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         name=\"city\"\r\n//                         value={address.city}\r\n//                         onChange={handleChange}\r\n//                         required\r\n//                     />\r\n//                 </label>\r\n//                 <label>\r\n//                     State:\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         name=\"state\"\r\n//                         value={address.state}\r\n//                         onChange={handleChange}\r\n//                         required\r\n//                     />\r\n//                 </label>\r\n//\r\n//                 <label>\r\n//                     Zip Code:\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         name=\"zipCode\"\r\n//                         value={address.zipCode}\r\n//                         onChange={handleChange}\r\n//                         required\r\n//                     />\r\n//                 </label>\r\n//\r\n//                 <label>\r\n//                     Country:\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         name=\"country\"\r\n//                         value={address.country}\r\n//                         onChange={handleChange}\r\n//                         required\r\n//                     />\r\n//                 </label>\r\n//                 <button type=\"submit\">\r\n//                     {location.pathname === '/edit-address' ? 'Edit Address' : \"Save Address\"}\r\n//                 </button>\r\n//             </form>\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default AddressPage;\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////\r\n\r\n//\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n// import ApiService from \"../../service/ApiService\";\r\n// import '../../style/addressPage.css';\r\n// import MapComponent from \"../future features/MapComponent\";\r\n//\r\n// const AddressPage = () => {\r\n//     const [address, setAddress] = useState({\r\n//         street: '',\r\n//         city: '',\r\n//         state: '',\r\n//         zipCode: '',\r\n//         country: ''\r\n//     });\r\n//\r\n//     const [error, setError] = useState(null);\r\n//     const navigate = useNavigate();\r\n//     const location = useLocation();\r\n//\r\n//     useEffect(() => {\r\n//         if (location.pathname === '/edit-address') {\r\n//             fetchUserInfo();\r\n//         }\r\n//     }, [location.pathname]);\r\n//\r\n//     const fetchUserInfo = async () => {\r\n//         try {\r\n//             const response = await ApiService.getLoggedInUserInfo();\r\n//             if (response.user.address) {\r\n//                 setAddress(response.user.address);\r\n//             }\r\n//         } catch (error) {\r\n//             setError(error.response?.data?.message || error.message || \"Unable to fetch user information\");\r\n//         }\r\n//     };\r\n//\r\n//     const handleChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         setAddress((prevAddress) => ({\r\n//             ...prevAddress,\r\n//             [name]: value\r\n//         }));\r\n//     };\r\n//\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         try {\r\n//             await ApiService.saveAddress(address);\r\n//             navigate(\"/cart\", { state: { addressSaved: true } }); // Pass a flag to indicate that the address is saved\r\n//         } catch (error) {\r\n//             setError(error.response?.data?.message || error.message || \"Failed to save/update address\");\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <div className=\"address-page\">\r\n//             <h2>{location.pathname === '/edit-address' ? 'Edit Address' : \"Add Address\"}</h2>\r\n//             {error && <p className=\"error-message\">{error}</p>}\r\n//\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <label>\r\n//                     Street:\r\n//                     <input type=\"text\"\r\n//                            name=\"street\"\r\n//                            value={address.street}\r\n//                            onChange={handleChange}\r\n//                            required />\r\n//                 </label>\r\n//                 <label>\r\n//                     City:\r\n//                     <input type=\"text\"\r\n//                            name=\"city\"\r\n//                            value={address.city}\r\n//                            onChange={handleChange}\r\n//                            required />\r\n//                 </label>\r\n//                 <label>\r\n//                     State:\r\n//                     <input type=\"text\"\r\n//                            name=\"state\"\r\n//                            value={address.state}\r\n//                            onChange={handleChange}\r\n//                            required />\r\n//                 </label>\r\n//                 <label>\r\n//                     Zip Code:\r\n//                     <input type=\"text\"\r\n//                            name=\"zipCode\"\r\n//                            value={address.zipCode}\r\n//                            onChange={handleChange}\r\n//                            required />\r\n//                 </label>\r\n//                 <label>\r\n//                     Country:\r\n//                     <input type=\"text\"\r\n//                            name=\"country\"\r\n//                            value={address.country}\r\n//                            onChange={handleChange}\r\n//                            required />\r\n//                 </label>\r\n//                 <button type=\"submit\">{location.pathname === '/edit-address' ? 'Edit Address' : \"Save Address\"}</button>\r\n//             </form>\r\n//\r\n//             <MapComponent />\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default AddressPage;\r\n//\r\n//\r\n\r\n\r\n\r\n\r\n// AddressPage.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport ApiService from \"../../service/ApiService\";\r\nimport MapComponent from '../future features/MapComponent'; // Adjust the path as needed\r\nimport '../../style/addressPage.css';\r\nimport axios from 'axios';\r\n\r\nconst AddressPage = () => {\r\n    const [address, setAddress] = useState({\r\n        street: '',\r\n        city: '',\r\n        state: '',\r\n        zipCode: '',\r\n        country: ''\r\n    });\r\n\r\n    const [coordinates, setCoordinates] = useState({ lat: null, lng: null });\r\n    const [error, setError] = useState(null);\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        if (location.pathname === '/edit-address') {\r\n            fetchUserInfo();\r\n        }\r\n    }, [location.pathname]);\r\n\r\n    const fetchUserInfo = async () => {\r\n        try {\r\n            const response = await ApiService.getLoggedInUserInfo();\r\n            if (response.user.address) {\r\n                setAddress(response.user.address);\r\n                // Get coordinates when editing address\r\n                await fetchCoordinates(response.user.address);\r\n            }\r\n        } catch (error) {\r\n            setError(error.response?.data?.message || error.message || \"Unable to fetch user information\");\r\n        }\r\n    };\r\n\r\n    const fetchCoordinates = async (address) => {\r\n        const { street, city, state, country } = address;\r\n        const fullAddress = `${street}, ${city}, ${state}, ${country}`;\r\n\r\n        try {\r\n            const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json`, {\r\n                params: {\r\n                    q: fullAddress,\r\n                    key: '8f741c7ce35544609646455395ac00a9', // Your OpenCage API key\r\n                    limit: 1,\r\n                },\r\n            });\r\n            const { lat, lng } = response.data.results[0].geometry;\r\n            setCoordinates({ lat, lng });\r\n        } catch (error) {\r\n            console.error(\"Error fetching coordinates:\", error);\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setAddress((prevAddress) => ({\r\n            ...prevAddress,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            await ApiService.saveAddress(address);\r\n            await fetchCoordinates(address); // Fetch coordinates after saving\r\n            navigate(\"/cart\", { state: { addressSaved: true, coordinates } }); // Pass coordinates\r\n        } catch (error) {\r\n            setError(error.response?.data?.message || error.message || \"Failed to save/update address\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"address-page\">\r\n            <h2>{location.pathname === '/edit-address' ? 'Edit Address' : \"Add Address\"}</h2>\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Street:\r\n                    <input type=\"text\"\r\n                           name=\"street\"\r\n                           value={address.street}\r\n                           onChange={handleChange}\r\n                           required />\r\n                </label>\r\n                <label>\r\n                    City:\r\n                    <input type=\"text\"\r\n                           name=\"city\"\r\n                           value={address.city}\r\n                           onChange={handleChange}\r\n                           required />\r\n                </label>\r\n                <label>\r\n                    State:\r\n                    <input type=\"text\"\r\n                           name=\"state\"\r\n                           value={address.state}\r\n                           onChange={handleChange}\r\n                           required />\r\n                </label>\r\n                <label>\r\n                    Zip Code:\r\n                    <input type=\"text\"\r\n                           name=\"zipCode\"\r\n                           value={address.zipCode}\r\n                           onChange={handleChange}\r\n                           required />\r\n                </label>\r\n                <label>\r\n                    Country:\r\n                    <input type=\"text\"\r\n                           name=\"country\"\r\n                           value={address.country}\r\n                           onChange={handleChange}\r\n                           required />\r\n                </label>\r\n                <button type=\"submit\">{location.pathname === '/edit-address' ? 'Edit Address' : \"Save Address\"}</button>\r\n            </form>\r\n\r\n            {coordinates.lat && coordinates.lng && (\r\n                <MapComponent position={[coordinates.lat, coordinates.lng]} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddressPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}