{"ast":null,"code":"//\n// import axios from \"axios\";\n//\n// export default class ApiService {\n//\n//     //Here  I had used No Ip dns bcz when I stopped instance so it will automatically configure with instance ip address.\n//     // static BASE_URL = \"http://sportsclub.ddns.net:2424\";\n//\n//\n//\n//     // static BASE_URL = \"http://13.201.81.16:2424\";\n//     //\n//     //ec2-13-201-81-16.ap-south-1.compute.amazonaws.com\n//\n//     static BASE_URL = \"http://localhost:2424\";\n//\n//\n//\n//\n//\n//\n//     static getHeader() {\n//         const token = localStorage.getItem(\"token\");\n//         return {\n//             Authorization: `Bearer ${token}`,\n//             \"Content-Type\": \"application/json\"\n//         };\n//     }\n//\n//     /**AUTh && USERS API */\n//     static async registerUser(registration) {\n//         const response = await axios.post(`${this.BASE_URL}/auth/register`, registration)\n//         return response.data;\n//     }\n//\n//\n//     static async loginUser(loginDetails) {\n//         const response = await axios.post(`${this.BASE_URL}/auth/login`, loginDetails)\n//         return response.data;\n//     }\n//\n//\n//     static async getLoggedInUserInfo() {\n//         const response = await axios.get(`${this.BASE_URL}/user/my-info`, {\n//             headers: this.getHeader()\n//         });\n//         return response.data;\n//     }\n//\n//\n//     /**PRODUCT ENDPOINT */\n//\n//     static async addProduct(formData) {\n//         const response = await axios.post(`${this.BASE_URL}/product/create`, formData, {\n//             headers: {\n//                 ...this.getHeader(),\n//                 \"Content-Type\": \"multipart/form-data\"\n//             }\n//         });\n//         return response.data;\n//     }\n//\n//     static async updateProduct(formData) {\n//         const response = await axios.put(`${this.BASE_URL}/product/update`, formData, {\n//             headers: {\n//                 ...this.getHeader(),\n//                 \"Content-Type\": \"multipart/form-data\"\n//             }\n//         });\n//         return response.data;\n//     }\n//\n//     static async getAllProducts() {\n//         const response = await axios.get(`${this.BASE_URL}/product/get-all`)\n//         return response.data;\n//     }\n//\n//     static async searchProducts(searchValue) {\n//         const response = await axios.get(`${this.BASE_URL}/product/search`, {\n//             params: { searchValue }\n//         });\n//         return response.data;\n//     }\n//\n//     static async getAllProductsByCategoryId(categoryId) {\n//         const response = await axios.get(`${this.BASE_URL}/product/get-by-category-id/${categoryId}`)\n//         return response.data;\n//     }\n//\n//     static async getProductById(productId) {\n//         const response = await axios.get(`${this.BASE_URL}/product/get-by-product-id/${productId}`)\n//         return response.data;\n//     }\n//\n//     static async deleteProduct(productId) {\n//         const response = await axios.delete(`${this.BASE_URL}/product/delete/${productId}`, {\n//             headers: this.getHeader()\n//         });\n//         return response.data;\n//     }\n//\n//     /**CATEGORY */\n//     static async createCategory(body) {\n//         const response = await axios.post(`${this.BASE_URL}/category/create`, body, {\n//             headers: this.getHeader()\n//         })\n//         return response.data;\n//     }\n//\n//     static async getAllCategory() {\n//         const response = await axios.get(`${this.BASE_URL}/category/get-all`)\n//         return response.data;\n//     }\n//\n//     static async getCategoryById(categoryId) {\n//         const response = await axios.get(`${this.BASE_URL}/category/get-category-by-id/${categoryId}`)\n//         return response.data;\n//     }\n//\n//     static async updateCategory(categoryId, body) {\n//         const response = await axios.put(`${this.BASE_URL}/category/update/${categoryId}`, body, {\n//             headers: this.getHeader()\n//         })\n//         return response.data;\n//     }\n//\n//     static async deleteCategory(categoryId) {\n//         const response = await axios.delete(`${this.BASE_URL}/category/delete/${categoryId}`, {\n//             headers: this.getHeader()\n//         })\n//         return response.data;\n//     }\n//\n//     /**ORDEDR */\n//     static async createOrder(body) {\n//         const response = await axios.post(`${this.BASE_URL}/order/create`, body, {\n//             headers: this.getHeader()\n//         })\n//         return response.data;\n//     }\n//\n//     static async getAllOrders() {\n//         const response = await axios.get(`${this.BASE_URL}/order/filter`, {\n//             headers: this.getHeader()\n//         })\n//         return response.data;\n//     }\n//\n//     static async getOrderItemById(itemId) {\n//         const response = await axios.get(`${this.BASE_URL}/order/filter`, {\n//             headers: this.getHeader(),\n//             params: {itemId}\n//         })\n//         return response.data;\n//     }\n//\n//     static async getAllOrderItemsByStatus(status) {\n//         const response = await axios.get(`${this.BASE_URL}/order/filter`, {\n//             headers: this.getHeader(),\n//             params: {status}\n//         })\n//         return response.data;\n//     }\n//\n//     static async updateOrderitemStatus(orderItemId, status) {\n//         const response = await axios.put(`${this.BASE_URL}/order/update-item-status/${orderItemId}`, {}, {\n//             headers: this.getHeader(),\n//             params: {status}\n//         })\n//         return response.data;\n//     }\n//\n//\n//\n//\n//     /**ADDRESS */\n//     static async saveAddress(body) {\n//         const response = await axios.post(`${this.BASE_URL}/address/save`, body, {\n//             headers: this.getHeader()\n//         })\n//         return response.data;\n//     }\n//\n//     /***AUTHEMNTICATION CHECKER */\n//     static logout(){\n//         localStorage.removeItem('token')\n//         localStorage.removeItem('role')\n//     }\n//\n//     static isAuthenticated(){\n//         const token = localStorage.getItem('token')\n//         return !!token\n//     }\n//\n//     static isAdmin(){\n//         const role = localStorage.getItem('role')\n//         return role === 'ADMIN'\n//     }\n//\n// }","map":{"version":3,"names":[],"sources":["D:/project modifications/sportshub/client/src/service/ApiService.js"],"sourcesContent":["//\r\n// import axios from \"axios\";\r\n//\r\n// export default class ApiService {\r\n//\r\n//     //Here  I had used No Ip dns bcz when I stopped instance so it will automatically configure with instance ip address.\r\n//     // static BASE_URL = \"http://sportsclub.ddns.net:2424\";\r\n//\r\n//\r\n//\r\n//     // static BASE_URL = \"http://13.201.81.16:2424\";\r\n//     //\r\n//     //ec2-13-201-81-16.ap-south-1.compute.amazonaws.com\r\n//\r\n//     static BASE_URL = \"http://localhost:2424\";\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//     static getHeader() {\r\n//         const token = localStorage.getItem(\"token\");\r\n//         return {\r\n//             Authorization: `Bearer ${token}`,\r\n//             \"Content-Type\": \"application/json\"\r\n//         };\r\n//     }\r\n//\r\n//     /**AUTh && USERS API */\r\n//     static async registerUser(registration) {\r\n//         const response = await axios.post(`${this.BASE_URL}/auth/register`, registration)\r\n//         return response.data;\r\n//     }\r\n//\r\n//\r\n//     static async loginUser(loginDetails) {\r\n//         const response = await axios.post(`${this.BASE_URL}/auth/login`, loginDetails)\r\n//         return response.data;\r\n//     }\r\n//\r\n//\r\n//     static async getLoggedInUserInfo() {\r\n//         const response = await axios.get(`${this.BASE_URL}/user/my-info`, {\r\n//             headers: this.getHeader()\r\n//         });\r\n//         return response.data;\r\n//     }\r\n//\r\n//\r\n//     /**PRODUCT ENDPOINT */\r\n//\r\n//     static async addProduct(formData) {\r\n//         const response = await axios.post(`${this.BASE_URL}/product/create`, formData, {\r\n//             headers: {\r\n//                 ...this.getHeader(),\r\n//                 \"Content-Type\": \"multipart/form-data\"\r\n//             }\r\n//         });\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async updateProduct(formData) {\r\n//         const response = await axios.put(`${this.BASE_URL}/product/update`, formData, {\r\n//             headers: {\r\n//                 ...this.getHeader(),\r\n//                 \"Content-Type\": \"multipart/form-data\"\r\n//             }\r\n//         });\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async getAllProducts() {\r\n//         const response = await axios.get(`${this.BASE_URL}/product/get-all`)\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async searchProducts(searchValue) {\r\n//         const response = await axios.get(`${this.BASE_URL}/product/search`, {\r\n//             params: { searchValue }\r\n//         });\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async getAllProductsByCategoryId(categoryId) {\r\n//         const response = await axios.get(`${this.BASE_URL}/product/get-by-category-id/${categoryId}`)\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async getProductById(productId) {\r\n//         const response = await axios.get(`${this.BASE_URL}/product/get-by-product-id/${productId}`)\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async deleteProduct(productId) {\r\n//         const response = await axios.delete(`${this.BASE_URL}/product/delete/${productId}`, {\r\n//             headers: this.getHeader()\r\n//         });\r\n//         return response.data;\r\n//     }\r\n//\r\n//     /**CATEGORY */\r\n//     static async createCategory(body) {\r\n//         const response = await axios.post(`${this.BASE_URL}/category/create`, body, {\r\n//             headers: this.getHeader()\r\n//         })\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async getAllCategory() {\r\n//         const response = await axios.get(`${this.BASE_URL}/category/get-all`)\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async getCategoryById(categoryId) {\r\n//         const response = await axios.get(`${this.BASE_URL}/category/get-category-by-id/${categoryId}`)\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async updateCategory(categoryId, body) {\r\n//         const response = await axios.put(`${this.BASE_URL}/category/update/${categoryId}`, body, {\r\n//             headers: this.getHeader()\r\n//         })\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async deleteCategory(categoryId) {\r\n//         const response = await axios.delete(`${this.BASE_URL}/category/delete/${categoryId}`, {\r\n//             headers: this.getHeader()\r\n//         })\r\n//         return response.data;\r\n//     }\r\n//\r\n//     /**ORDEDR */\r\n//     static async createOrder(body) {\r\n//         const response = await axios.post(`${this.BASE_URL}/order/create`, body, {\r\n//             headers: this.getHeader()\r\n//         })\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async getAllOrders() {\r\n//         const response = await axios.get(`${this.BASE_URL}/order/filter`, {\r\n//             headers: this.getHeader()\r\n//         })\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async getOrderItemById(itemId) {\r\n//         const response = await axios.get(`${this.BASE_URL}/order/filter`, {\r\n//             headers: this.getHeader(),\r\n//             params: {itemId}\r\n//         })\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async getAllOrderItemsByStatus(status) {\r\n//         const response = await axios.get(`${this.BASE_URL}/order/filter`, {\r\n//             headers: this.getHeader(),\r\n//             params: {status}\r\n//         })\r\n//         return response.data;\r\n//     }\r\n//\r\n//     static async updateOrderitemStatus(orderItemId, status) {\r\n//         const response = await axios.put(`${this.BASE_URL}/order/update-item-status/${orderItemId}`, {}, {\r\n//             headers: this.getHeader(),\r\n//             params: {status}\r\n//         })\r\n//         return response.data;\r\n//     }\r\n//\r\n//\r\n//\r\n//\r\n//     /**ADDRESS */\r\n//     static async saveAddress(body) {\r\n//         const response = await axios.post(`${this.BASE_URL}/address/save`, body, {\r\n//             headers: this.getHeader()\r\n//         })\r\n//         return response.data;\r\n//     }\r\n//\r\n//     /***AUTHEMNTICATION CHECKER */\r\n//     static logout(){\r\n//         localStorage.removeItem('token')\r\n//         localStorage.removeItem('role')\r\n//     }\r\n//\r\n//     static isAuthenticated(){\r\n//         const token = localStorage.getItem('token')\r\n//         return !!token\r\n//     }\r\n//\r\n//     static isAdmin(){\r\n//         const role = localStorage.getItem('role')\r\n//         return role === 'ADMIN'\r\n//     }\r\n//\r\n// }"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}