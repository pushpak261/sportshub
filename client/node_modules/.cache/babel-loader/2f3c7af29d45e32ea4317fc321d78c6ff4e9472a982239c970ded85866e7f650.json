{"ast":null,"code":"import _regeneratorRuntime from \"D:/project modifications/sportshub/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/project modifications/sportshub/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _jsxFileName = \"D:\\\\project modifications\\\\sportshub\\\\client\\\\src\\\\component\\\\future features\\\\PayPalButton.jsx\",\n  _this = this;\nimport React from 'react';\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar PayPalButton = function PayPalButton(_ref) {\n  var totalAmount = _ref.totalAmount;\n  return /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n    options: {\n      \"client-id\": \"AQnZkbeWlWUtMrejlLoVqUf8d1bIlK28dOsb2vKrtjQ0lEvX8C5g1OowLPbKonCUmF0W_0zp7SvFw5VN\"\n    },\n    children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n      createOrder: function createOrder(data, actions) {\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              value: totalAmount.toFixed(2) // Use the total amount from props\n            }\n          }]\n        });\n      },\n      onApprove: (/*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(data, actions) {\n          var order;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return actions.order.capture();\n              case 2:\n                order = _context.sent;\n                alert('Transaction completed by ' + order.payer.name.given_name);\n                // Optionally, you can clear the cart or redirect after successful payment\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()),\n      onError: function onError(err) {\n        console.error('PayPal Checkout onError', err);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, _this);\n};\n_c = PayPalButton;\nexport default PayPalButton;\nvar _c;\n$RefreshReg$(_c, \"PayPalButton\");","map":{"version":3,"names":["React","PayPalScriptProvider","PayPalButtons","jsxDEV","_jsxDEV","PayPalButton","_ref","totalAmount","options","children","createOrder","data","actions","order","create","purchase_units","amount","value","toFixed","onApprove","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","capture","sent","alert","payer","name","given_name","stop","_x","_x2","apply","arguments","onError","err","console","error","fileName","_jsxFileName","lineNumber","columnNumber","_this","_c","$RefreshReg$"],"sources":["D:/project modifications/sportshub/client/src/component/future features/PayPalButton.jsx"],"sourcesContent":["import React from 'react';\r\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\r\n\r\nconst PayPalButton = ({ totalAmount }) => {\r\n    return (\r\n        <PayPalScriptProvider options={{ \"client-id\": \"AQnZkbeWlWUtMrejlLoVqUf8d1bIlK28dOsb2vKrtjQ0lEvX8C5g1OowLPbKonCUmF0W_0zp7SvFw5VN\" }}>\r\n            <PayPalButtons\r\n                createOrder={(data, actions) => {\r\n                    return actions.order.create({\r\n                        purchase_units: [{\r\n                            amount: {\r\n                                value: totalAmount.toFixed(2), // Use the total amount from props\r\n                            },\r\n                        }],\r\n                    });\r\n                }}\r\n                onApprove={async (data, actions) => {\r\n                    const order = await actions.order.capture();\r\n                    alert('Transaction completed by ' + order.payer.name.given_name);\r\n                    // Optionally, you can clear the cart or redirect after successful payment\r\n                }}\r\n                onError={(err) => {\r\n                    console.error('PayPal Checkout onError', err);\r\n                }}\r\n            />\r\n        </PayPalScriptProvider>\r\n    );\r\n};\r\n\r\nexport default PayPalButton;\r\n\r\n\r\n\r\n\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,oBAAoB,EAAEC,aAAa,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAAC,IAAA,EAAwB;EAAA,IAAlBC,WAAW,GAAAD,IAAA,CAAXC,WAAW;EAC/B,oBACIH,OAAA,CAACH,oBAAoB;IAACO,OAAO,EAAE;MAAE,WAAW,EAAE;IAAmF,CAAE;IAAAC,QAAA,eAC/HL,OAAA,CAACF,aAAa;MACVQ,WAAW,EAAE,SAAbA,WAAWA,CAAGC,IAAI,EAAEC,OAAO,EAAK;QAC5B,OAAOA,OAAO,CAACC,KAAK,CAACC,MAAM,CAAC;UACxBC,cAAc,EAAE,CAAC;YACbC,MAAM,EAAE;cACJC,KAAK,EAAEV,WAAW,CAACW,OAAO,CAAC,CAAC,CAAC,CAAE;YACnC;UACJ,CAAC;QACL,CAAC,CAAC;MACN,CAAE;MACFC,SAAS;QAAA,IAAAC,KAAA,GAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAC,QAAOb,IAAI,EAAEC,OAAO;UAAA,IAAAC,KAAA;UAAA,OAAAS,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;YAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBAAAF,QAAA,CAAAE,IAAA;gBAAA,OACPjB,OAAO,CAACC,KAAK,CAACiB,OAAO,CAAC,CAAC;cAAA;gBAArCjB,KAAK,GAAAc,QAAA,CAAAI,IAAA;gBACXC,KAAK,CAAC,2BAA2B,GAAGnB,KAAK,CAACoB,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC;gBAChE;cAAA;cAAA;gBAAA,OAAAR,QAAA,CAAAS,IAAA;YAAA;UAAA,GAAAZ,OAAA;QAAA,CACH;QAAA,iBAAAa,EAAA,EAAAC,GAAA;UAAA,OAAAlB,KAAA,CAAAmB,KAAA,OAAAC,SAAA;QAAA;MAAA,IAAC;MACFC,OAAO,EAAE,SAATA,OAAOA,CAAGC,GAAG,EAAK;QACdC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MACjD;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KACL;EAAC;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KACgB,CAAC;AAE/B,CAAC;AAACC,EAAA,GAxBI7C,YAAY;AA0BlB,eAAeA,YAAY;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}