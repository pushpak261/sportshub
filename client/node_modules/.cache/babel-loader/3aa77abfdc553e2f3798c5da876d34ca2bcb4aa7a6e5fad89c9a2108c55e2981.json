{"ast":null,"code":"var _jsxFileName = \"D:\\\\project modifications\\\\sportshub\\\\client\\\\src\\\\component\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\n//\n// const CartContext = createContext();\n//\n// const initialState = {\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\n// }\n//\n//\n// const cartReducer = (state, action) =>{\n//     switch(action.type){\n//         case 'ADD_ITEM': {\n//             //identify exisitng item\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\n//             let newCart;\n//\n//             if(existingItem){\n//                 newCart = state.cart.map(item =>\n//                     item.id === action.payload.id\n//                         ? {...item, quantity: item.quantity + 1}\n//                         : item\n//                 );\n//             }else {\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\n//             }\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'REMOVE_ITEM':{\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'INCREMENT_ITEM': {\n//             const newCart = state.cart.map(item=>\n//                 item.id === action.payload.id\n//                     ? {...item, quantity: item.quantity + 1}\n//                     :item\n//             );\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'DECREMENT_ITEM': {\n//             const newCart = state.cart.map(item =>\n//                 item.id === action.payload.id && item.quantity > 1\n//                     ? {...item, quantity: item.quantity -1}\n//                     :item\n//             )\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'CLEAR_CART': {\n//             localStorage.removeItem('cart');\n//             return {...state, cart:[]};\n//         }\n//         default:\n//             return state;\n//     }\n// };\n//\n//\n//\n//\n// export const CartProvider = ({children}) => {\n//\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\n//\n//\n//     useEffect(() =>{\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\n//     }, [state.cart]);\n//\n//     return (\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n//\n// export const useCart = () => useContext(CartContext);\n//\n//\n\n//\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\n//\n// const CartContext = createContext();\n//\n// const initialState = {\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\n// }\n//\n//\n// const cartReducer = (state, action) =>{\n//     switch(action.type){\n//         case 'ADD_ITEM': {\n//             //identify exisitng item\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\n//             let newCart;\n//\n//             if(existingItem){\n//                 newCart = state.cart.map(item =>\n//                     item.id === action.payload.id\n//                         ? {...item, quantity: item.quantity + 1}\n//                         : item\n//                 );\n//             }else {\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\n//             }\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'REMOVE_ITEM':{\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'INCREMENT_ITEM': {\n//             const newCart = state.cart.map(item=>\n//                 item.id === action.payload.id\n//                     ? {...item, quantity: item.quantity + 1}\n//                     :item\n//             );\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'DECREMENT_ITEM': {\n//             const newCart = state.cart.map(item =>\n//                 item.id === action.payload.id && item.quantity > 1\n//                     ? {...item, quantity: item.quantity -1}\n//                     :item\n//             )\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'CLEAR_CART': {\n//             localStorage.removeItem('cart');\n//             return {...state, cart:[]};\n//         }\n//         default:\n//             return state;\n//     }\n// };\n//\n//\n//\n//\n// export const CartProvider = ({children}) => {\n//\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\n//\n//\n//     useEffect(() =>{\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\n//     }, [state.cart]);\n//\n//     return (\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n//\n// export const useCart = () => useContext(CartContext);\n//\n\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Create a CartContext to store the cart data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Define cart actions\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      return [...state, action.payload];\n    case 'REMOVE_ITEM':\n      return state.filter(item => item.id !== action.payload.id);\n    case 'INCREMENT_ITEM':\n      return state.map(item => item.id === action.payload.id ? {\n        ...item,\n        quantity: item.quantity + 1\n      } : item);\n    case 'DECREMENT_ITEM':\n      return state.map(item => item.id === action.payload.id ? {\n        ...item,\n        quantity: item.quantity - 1\n      } : item);\n    case 'CLEAR_CART':\n      return [];\n    default:\n      return state;\n  }\n};\n\n// Create CartProvider to wrap the app\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  // Retrieve cart from localStorage if available\n  const initialState = JSON.parse(localStorage.getItem('cart')) || [];\n  const [cart, dispatch] = useReducer(cartReducer, initialState);\n  useEffect(() => {\n    // Store cart in localStorage whenever it changes\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }, [cart]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the cart context\n_s(CartProvider, \"AybYfaEv3u48un10whgik6AoBGQ=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","CartContext","cartReducer","state","action","type","payload","filter","item","id","map","quantity","CartProvider","children","_s","initialState","JSON","parse","localStorage","getItem","cart","dispatch","setItem","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["D:/project modifications/sportshub/client/src/component/context/CartContext.js"],"sourcesContent":["// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\r\n//\r\n// const CartContext = createContext();\r\n//\r\n// const initialState = {\r\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\r\n// }\r\n//\r\n//\r\n// const cartReducer = (state, action) =>{\r\n//     switch(action.type){\r\n//         case 'ADD_ITEM': {\r\n//             //identify exisitng item\r\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n//             let newCart;\r\n//\r\n//             if(existingItem){\r\n//                 newCart = state.cart.map(item =>\r\n//                     item.id === action.payload.id\r\n//                         ? {...item, quantity: item.quantity + 1}\r\n//                         : item\r\n//                 );\r\n//             }else {\r\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\r\n//             }\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'REMOVE_ITEM':{\r\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'INCREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item=>\r\n//                 item.id === action.payload.id\r\n//                     ? {...item, quantity: item.quantity + 1}\r\n//                     :item\r\n//             );\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'DECREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item =>\r\n//                 item.id === action.payload.id && item.quantity > 1\r\n//                     ? {...item, quantity: item.quantity -1}\r\n//                     :item\r\n//             )\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'CLEAR_CART': {\r\n//             localStorage.removeItem('cart');\r\n//             return {...state, cart:[]};\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n//\r\n//\r\n//\r\n//\r\n// export const CartProvider = ({children}) => {\r\n//\r\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\r\n//\r\n//\r\n//     useEffect(() =>{\r\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\r\n//     }, [state.cart]);\r\n//\r\n//     return (\r\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     )\r\n// }\r\n//\r\n// export const useCart = () => useContext(CartContext);\r\n//\r\n//\r\n\r\n//\r\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\r\n//\r\n// const CartContext = createContext();\r\n//\r\n// const initialState = {\r\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\r\n// }\r\n//\r\n//\r\n// const cartReducer = (state, action) =>{\r\n//     switch(action.type){\r\n//         case 'ADD_ITEM': {\r\n//             //identify exisitng item\r\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n//             let newCart;\r\n//\r\n//             if(existingItem){\r\n//                 newCart = state.cart.map(item =>\r\n//                     item.id === action.payload.id\r\n//                         ? {...item, quantity: item.quantity + 1}\r\n//                         : item\r\n//                 );\r\n//             }else {\r\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\r\n//             }\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'REMOVE_ITEM':{\r\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'INCREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item=>\r\n//                 item.id === action.payload.id\r\n//                     ? {...item, quantity: item.quantity + 1}\r\n//                     :item\r\n//             );\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'DECREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item =>\r\n//                 item.id === action.payload.id && item.quantity > 1\r\n//                     ? {...item, quantity: item.quantity -1}\r\n//                     :item\r\n//             )\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'CLEAR_CART': {\r\n//             localStorage.removeItem('cart');\r\n//             return {...state, cart:[]};\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n//\r\n//\r\n//\r\n//\r\n// export const CartProvider = ({children}) => {\r\n//\r\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\r\n//\r\n//\r\n//     useEffect(() =>{\r\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\r\n//     }, [state.cart]);\r\n//\r\n//     return (\r\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     )\r\n// }\r\n//\r\n// export const useCart = () => useContext(CartContext);\r\n//\r\n\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// Create a CartContext to store the cart data\r\nconst CartContext = createContext();\r\n\r\n// Define cart actions\r\nconst cartReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_ITEM':\r\n            return [...state, action.payload];\r\n        case 'REMOVE_ITEM':\r\n            return state.filter(item => item.id !== action.payload.id);\r\n        case 'INCREMENT_ITEM':\r\n            return state.map(item =>\r\n                item.id === action.payload.id\r\n                    ? { ...item, quantity: item.quantity + 1 }\r\n                    : item\r\n            );\r\n        case 'DECREMENT_ITEM':\r\n            return state.map(item =>\r\n                item.id === action.payload.id\r\n                    ? { ...item, quantity: item.quantity - 1 }\r\n                    : item\r\n            );\r\n        case 'CLEAR_CART':\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Create CartProvider to wrap the app\r\nexport const CartProvider = ({ children }) => {\r\n    // Retrieve cart from localStorage if available\r\n    const initialState = JSON.parse(localStorage.getItem('cart')) || [];\r\n\r\n    const [cart, dispatch] = useReducer(cartReducer, initialState);\r\n\r\n    useEffect(() => {\r\n        // Store cart in localStorage whenever it changes\r\n        localStorage.setItem('cart', JSON.stringify(cart));\r\n    }, [cart]);\r\n\r\n    return (\r\n        <CartContext.Provider value={{ cart, dispatch }}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the cart context\r\nexport const useCart = () => {\r\n    return useContext(CartContext);\r\n};\r\n"],"mappingsaAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE/E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMO,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACnC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,UAAU;MACX,OAAO,CAAC,GAAGF,KAAK,EAAEC,MAAM,CAACE,OAAO,CAAC;IACrC,KAAK,aAAa;MACd,OAAOH,KAAK,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,CAACG,EAAE,CAAC;IAC9D,KAAK,gBAAgB;MACjB,OAAON,KAAK,CAACO,GAAG,CAACF,IAAI,IACjBA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,CAACG,EAAE,GACvB;QAAE,GAAGD,IAAI;QAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG;MAAE,CAAC,GACxCH,IACV,CAAC;IACL,KAAK,gBAAgB;MACjB,OAAOL,KAAK,CAACO,GAAG,CAACF,IAAI,IACjBA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,CAACG,EAAE,GACvB;QAAE,GAAGD,IAAI;QAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG;MAAE,CAAC,GACxCH,IACV,CAAC;IACL,KAAK,YAAY;MACb,OAAO,EAAE;IACb;MACI,OAAOL,KAAK;EACpB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C;EACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE;EAEnE,MAAM,CAACC,IAAI,EAAEC,QAAQ,CAAC,GAAGxB,UAAU,CAACK,WAAW,EAAEa,YAAY,CAAC;EAE9DjB,SAAS,CAAC,MAAM;IACZ;IACAoB,YAAY,CAACI,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACH,IAAI,CAAC,CAAC;EACtD,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,oBACIpB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEL,IAAI;MAAEC;IAAS,CAAE;IAAAR,QAAA,EAC3CA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;;AAED;AAAAf,EAAA,CAlBaF,YAAY;AAAAkB,EAAA,GAAZlB,YAAY;AAmBzB,OAAO,MAAMmB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,OAAOpC,UAAU,CAACK,WAAW,CAAC;AAClC,CAAC;AAAC+B,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}