{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ECS\\\\Desktop\\\\Projects\\\\sportshub\\\\client\\\\src\\\\component\\\\pages\\\\CartPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import ApiService from \"../../service/ApiService\";\n// import { useCart } from \"../context/CartContext\";\n// import '../../style/cartPage.css'\n//\n// const CartPage = () => {\n//     const { cart, dispatch } = useCart();\n//     const [message, setMessage] = useState(null);\n//     const navigate = useNavigate();\n//\n//\n//     const incrementItem = (product) => {\n//         dispatch({ type: 'INCREMENT_ITEM', payload: product });\n//     }\n//\n//     const decrementItem = (product) => {\n//\n//         const cartItem = cart.find(item => item.id === product.id);\n//         if (cartItem && cartItem.quantity > 1) {\n//             dispatch({ type: 'DECREMENT_ITEM', payload: product });\n//         } else {\n//             dispatch({ type: 'REMOVE_ITEM', payload: product });\n//         }\n//     }\n//\n//     const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\n//\n//\n//\n//     const handleCheckout = async () => {\n//         if (!ApiService.isAuthenticated()) {\n//             setMessage(\"You need to login first before you can place an order\");\n//             setTimeout(() => {\n//                 setMessage('')\n//                 navigate(\"/login\")\n//             }, 3000);\n//             return;\n//         }\n//\n//         const orderItems = cart.map(item => ({\n//             productId: item.id,\n//             quantity: item.quantity\n//         }));\n//\n//         const orderRequest = {\n//             totalPrice,\n//             items: orderItems,\n//         }\n//\n//         try {\n//             const response = await ApiService.createOrder(orderRequest);\n//             setMessage(response.message)\n//\n//             setTimeout(() => {\n//                 setMessage('')\n//             }, 5000);\n//\n//             if (response.status === 200) {\n//                 dispatch({ type: 'CLEAR_CART' })\n//             }\n//\n//         } catch (error) {\n//             setMessage(error.response?.data?.message || error.message || 'Failed to place an order');\n//             setTimeout(() => {\n//                 setMessage('')\n//             }, 3000);\n//\n//         }\n//\n//     };\n//\n//\n//     return (\n//         <div className=\"cart-page\">\n//             <h1>Cart</h1>\n//             {message && <p className=\"response-message\">{message}</p>}\n//\n//             {cart.length === 0 ? (\n//                 <p>Your cart is empty</p>\n//             ) : (\n//                 <div>\n//                     <ul>\n//                         {cart.map(item => (\n//                             <li key={item.id}>\n//                                 <img src={item.imageUrl} alt={item.name} />\n//                                 <div>\n//                                     <h2>{item.name}</h2>\n//                                     <p>{item.description}</p>\n//                                     <div className=\"quantity-controls\">\n//                                         <button onClick={()=> decrementItem(item)}>-</button>\n//                                         <span>{item.quantity}</span>\n//                                         <button onClick={()=> incrementItem(item)}>+</button>\n//                                     </div>\n//                                     <span>${item.price.toFixed()}</span>\n//                                 </div>\n//                             </li>\n//                         ))}\n//                     </ul>\n//                     <h2>Total: ${totalPrice.toFixed(2)}</h2>\n//                     <button className=\"checkout-button\" onClick={handleCheckout}>Checkout</button>\n//                 </div>\n//             )}\n//         </div>\n//     )\n// }\n//\n// export default CartPage;\n\n/////////////////////////////////////////////\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import ApiService from \"../../service/ApiService\";\n// import { useCart } from \"../context/CartContext\";\n// import PayPalButton from '../../component/future features/PayPalButton'; // Import your PayPalButton\n// import '../../style/cartPage.css';\n//\n// const CartPage = () => {\n//     const { cart, dispatch } = useCart();\n//     const [message, setMessage] = useState(null);\n//     const [openPayPal, setOpenPayPal] = useState(false);\n//     const navigate = useNavigate();\n//     const location = useLocation();\n//\n//     const incrementItem = (product) => {\n//         dispatch({ type: 'INCREMENT_ITEM', payload: product });\n//     };\n//\n//     const decrementItem = (product) => {\n//         const cartItem = cart.find(item => item.id === product.id);\n//         if (cartItem && cartItem.quantity > 1) {\n//             dispatch({ type: 'DECREMENT_ITEM', payload: product });\n//         } else {\n//             dispatch({ type: 'REMOVE_ITEM', payload: product });\n//         }\n//     };\n//\n//     const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\n//\n//     useEffect(() => {\n//         if (location.state && location.state.addressSaved) {\n//             setOpenPayPal(true); // Open PayPal if the address was just saved\n//         }\n//     }, [location.state]);\n//\n//     return (\n//         <div className=\"cart-page\">\n//             <h1>Cart</h1>\n//             {message && <p className=\"response-message\">{message}</p>}\n//\n//             {cart.length === 0 ? (\n//                 <p>Your cart is empty</p>\n//             ) : (\n//                 <div>\n//                     <ul>\n//                         {cart.map(item => (\n//                             <li key={item.id} className=\"cart-item\">\n//                                 <img src={item.imageUrl} alt={item.name} />\n//                                 <div className=\"cart-item-details\">\n//                                     <h2>{item.name}</h2>\n//                                     <p>{item.description}</p>\n//                                     <span>${item.price.toFixed(2)}</span>\n//                                 </div>\n//                                 <div className=\"quantity-controls\">\n//                                     <button onClick={() => decrementItem(item)}>-</button>\n//                                     <span>{item.quantity}</span>\n//                                     <button onClick={() => incrementItem(item)}>+</button>\n//                                 </div>\n//                             </li>\n//                         ))}\n//                     </ul>\n//                     <h2>Total: ${totalPrice.toFixed(2)}</h2>\n//                     {openPayPal ? (\n//                         <PayPalButton totalAmount={totalPrice} /> // Open PayPal directly if address was saved\n//                     ) : (\n//                         <button onClick={() => navigate('/add-address')} className=\"add-address-button\">\n//                             Add Address\n//                         </button> // Button to add address\n//                     )}\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n//\n// export default CartPage;\n//\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport ApiService from \"../../service/ApiService\";\nimport { useCart } from \"../context/CartContext\";\nimport PayPalButton from '../../component/future features/PayPalButton'; // Import your PayPalButton\nimport '../../style/cartPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartPage = () => {\n  _s();\n  const {\n    cart,\n    dispatch\n  } = useCart();\n  const [message, setMessage] = useState(null);\n  const [paymentMethod, setPaymentMethod] = useState('cod'); // Default to Cash on Delivery\n  const [address, setAddress] = useState(''); // State to store the address\n  const navigate = useNavigate();\n  const location = useLocation();\n  const incrementItem = product => {\n    dispatch({\n      type: 'INCREMENT_ITEM',\n      payload: product\n    });\n  };\n  const decrementItem = product => {\n    const cartItem = cart.find(item => item.id === product.id);\n    if (cartItem && cartItem.quantity > 1) {\n      dispatch({\n        type: 'DECREMENT_ITEM',\n        payload: product\n      });\n    } else {\n      dispatch({\n        type: 'REMOVE_ITEM',\n        payload: product\n      });\n    }\n  };\n  const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\n\n  // Load address from local storage when component mounts\n  useEffect(() => {\n    const savedAddress = localStorage.getItem(\"address\");\n    if (savedAddress) {\n      setAddress(savedAddress); // Set address state from local storage\n    }\n  }, []);\n  const handleAddAddress = newAddress => {\n    setAddress(newAddress); // Update the address state\n    localStorage.setItem(\"address\", newAddress); // Save to local storage\n  };\n  const handleCheckout = async () => {\n    const confirmPlaceOrder = window.confirm(\"Do you want to place the order?\");\n    if (!confirmPlaceOrder) {\n      return; // If the user cancels, exit the function\n    }\n    const orderItems = cart.map(item => ({\n      productId: item.id,\n      quantity: item.quantity\n    }));\n    const orderRequest = {\n      totalPrice,\n      items: orderItems,\n      paymentMethod,\n      // Use the selected payment method\n      address // Include the address in the order request\n    };\n    try {\n      const response = await ApiService.createOrder(orderRequest);\n      setMessage(response.message);\n      if (response.status === 200) {\n        dispatch({\n          type: 'CLEAR_CART'\n        });\n        localStorage.removeItem(\"address\"); // Clear address from local storage on successful order\n        navigate(\"/order-confirmation\"); // Navigate to an order confirmation page\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Failed to place an order');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"response-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 25\n    }, this), cart.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your cart is empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: cart.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"cart-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.imageUrl,\n            alt: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cart-item-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", item.price.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"quantity-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => decrementItem(item),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: item.quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => incrementItem(item),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 33\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Total: $\", totalPrice.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }, this), address ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment-options\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"paypal\",\n            checked: paymentMethod === 'paypal',\n            onChange: () => setPaymentMethod('paypal')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 33\n          }, this), \"PayPal\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"cod\",\n            checked: paymentMethod === 'cod',\n            onChange: () => setPaymentMethod('cod')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 33\n          }, this), \"Cash on Delivery\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 29\n        }, this), paymentMethod === 'paypal' && /*#__PURE__*/_jsxDEV(PayPalButton, {\n          totalAmount: totalPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 60\n        }, this), paymentMethod === 'cod' && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"checkout-button\",\n          onClick: handleCheckout,\n          children: \"Place Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/add-address'),\n        className: \"add-address-button\",\n        children: \"Add Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 25\n      }, this) // Button to add address\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n_s(CartPage, \"PZ/WWMpduj5YcKp8y1Tzq6zkQt0=\", false, function () {\n  return [useCart, useNavigate, useLocation];\n});\n_c = CartPage;\nexport default CartPage;\nvar _c;\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","ApiService","useCart","PayPalButton","jsxDEV","_jsxDEV","CartPage","_s","cart","dispatch","message","setMessage","paymentMethod","setPaymentMethod","address","setAddress","navigate","location","incrementItem","product","type","payload","decrementItem","cartItem","find","item","id","quantity","totalPrice","reduce","total","price","savedAddress","localStorage","getItem","handleAddAddress","newAddress","setItem","handleCheckout","confirmPlaceOrder","window","confirm","orderItems","map","productId","orderRequest","items","response","createOrder","status","removeItem","error","_error$response","_error$response$data","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","src","imageUrl","alt","name","description","toFixed","onClick","value","checked","onChange","totalAmount","_c","$RefreshReg$"],"sources":["C:/Users/ECS/Desktop/Projects/sportshub/client/src/component/pages/CartPage.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import ApiService from \"../../service/ApiService\";\r\n// import { useCart } from \"../context/CartContext\";\r\n// import '../../style/cartPage.css'\r\n//\r\n// const CartPage = () => {\r\n//     const { cart, dispatch } = useCart();\r\n//     const [message, setMessage] = useState(null);\r\n//     const navigate = useNavigate();\r\n//\r\n//\r\n//     const incrementItem = (product) => {\r\n//         dispatch({ type: 'INCREMENT_ITEM', payload: product });\r\n//     }\r\n//\r\n//     const decrementItem = (product) => {\r\n//\r\n//         const cartItem = cart.find(item => item.id === product.id);\r\n//         if (cartItem && cartItem.quantity > 1) {\r\n//             dispatch({ type: 'DECREMENT_ITEM', payload: product });\r\n//         } else {\r\n//             dispatch({ type: 'REMOVE_ITEM', payload: product });\r\n//         }\r\n//     }\r\n//\r\n//     const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\r\n//\r\n//\r\n//\r\n//     const handleCheckout = async () => {\r\n//         if (!ApiService.isAuthenticated()) {\r\n//             setMessage(\"You need to login first before you can place an order\");\r\n//             setTimeout(() => {\r\n//                 setMessage('')\r\n//                 navigate(\"/login\")\r\n//             }, 3000);\r\n//             return;\r\n//         }\r\n//\r\n//         const orderItems = cart.map(item => ({\r\n//             productId: item.id,\r\n//             quantity: item.quantity\r\n//         }));\r\n//\r\n//         const orderRequest = {\r\n//             totalPrice,\r\n//             items: orderItems,\r\n//         }\r\n//\r\n//         try {\r\n//             const response = await ApiService.createOrder(orderRequest);\r\n//             setMessage(response.message)\r\n//\r\n//             setTimeout(() => {\r\n//                 setMessage('')\r\n//             }, 5000);\r\n//\r\n//             if (response.status === 200) {\r\n//                 dispatch({ type: 'CLEAR_CART' })\r\n//             }\r\n//\r\n//         } catch (error) {\r\n//             setMessage(error.response?.data?.message || error.message || 'Failed to place an order');\r\n//             setTimeout(() => {\r\n//                 setMessage('')\r\n//             }, 3000);\r\n//\r\n//         }\r\n//\r\n//     };\r\n//\r\n//\r\n//     return (\r\n//         <div className=\"cart-page\">\r\n//             <h1>Cart</h1>\r\n//             {message && <p className=\"response-message\">{message}</p>}\r\n//\r\n//             {cart.length === 0 ? (\r\n//                 <p>Your cart is empty</p>\r\n//             ) : (\r\n//                 <div>\r\n//                     <ul>\r\n//                         {cart.map(item => (\r\n//                             <li key={item.id}>\r\n//                                 <img src={item.imageUrl} alt={item.name} />\r\n//                                 <div>\r\n//                                     <h2>{item.name}</h2>\r\n//                                     <p>{item.description}</p>\r\n//                                     <div className=\"quantity-controls\">\r\n//                                         <button onClick={()=> decrementItem(item)}>-</button>\r\n//                                         <span>{item.quantity}</span>\r\n//                                         <button onClick={()=> incrementItem(item)}>+</button>\r\n//                                     </div>\r\n//                                     <span>${item.price.toFixed()}</span>\r\n//                                 </div>\r\n//                             </li>\r\n//                         ))}\r\n//                     </ul>\r\n//                     <h2>Total: ${totalPrice.toFixed(2)}</h2>\r\n//                     <button className=\"checkout-button\" onClick={handleCheckout}>Checkout</button>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export default CartPage;\r\n\r\n\r\n/////////////////////////////////////////////\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n// import ApiService from \"../../service/ApiService\";\r\n// import { useCart } from \"../context/CartContext\";\r\n// import PayPalButton from '../../component/future features/PayPalButton'; // Import your PayPalButton\r\n// import '../../style/cartPage.css';\r\n//\r\n// const CartPage = () => {\r\n//     const { cart, dispatch } = useCart();\r\n//     const [message, setMessage] = useState(null);\r\n//     const [openPayPal, setOpenPayPal] = useState(false);\r\n//     const navigate = useNavigate();\r\n//     const location = useLocation();\r\n//\r\n//     const incrementItem = (product) => {\r\n//         dispatch({ type: 'INCREMENT_ITEM', payload: product });\r\n//     };\r\n//\r\n//     const decrementItem = (product) => {\r\n//         const cartItem = cart.find(item => item.id === product.id);\r\n//         if (cartItem && cartItem.quantity > 1) {\r\n//             dispatch({ type: 'DECREMENT_ITEM', payload: product });\r\n//         } else {\r\n//             dispatch({ type: 'REMOVE_ITEM', payload: product });\r\n//         }\r\n//     };\r\n//\r\n//     const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\r\n//\r\n//     useEffect(() => {\r\n//         if (location.state && location.state.addressSaved) {\r\n//             setOpenPayPal(true); // Open PayPal if the address was just saved\r\n//         }\r\n//     }, [location.state]);\r\n//\r\n//     return (\r\n//         <div className=\"cart-page\">\r\n//             <h1>Cart</h1>\r\n//             {message && <p className=\"response-message\">{message}</p>}\r\n//\r\n//             {cart.length === 0 ? (\r\n//                 <p>Your cart is empty</p>\r\n//             ) : (\r\n//                 <div>\r\n//                     <ul>\r\n//                         {cart.map(item => (\r\n//                             <li key={item.id} className=\"cart-item\">\r\n//                                 <img src={item.imageUrl} alt={item.name} />\r\n//                                 <div className=\"cart-item-details\">\r\n//                                     <h2>{item.name}</h2>\r\n//                                     <p>{item.description}</p>\r\n//                                     <span>${item.price.toFixed(2)}</span>\r\n//                                 </div>\r\n//                                 <div className=\"quantity-controls\">\r\n//                                     <button onClick={() => decrementItem(item)}>-</button>\r\n//                                     <span>{item.quantity}</span>\r\n//                                     <button onClick={() => incrementItem(item)}>+</button>\r\n//                                 </div>\r\n//                             </li>\r\n//                         ))}\r\n//                     </ul>\r\n//                     <h2>Total: ${totalPrice.toFixed(2)}</h2>\r\n//                     {openPayPal ? (\r\n//                         <PayPalButton totalAmount={totalPrice} /> // Open PayPal directly if address was saved\r\n//                     ) : (\r\n//                         <button onClick={() => navigate('/add-address')} className=\"add-address-button\">\r\n//                             Add Address\r\n//                         </button> // Button to add address\r\n//                     )}\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default CartPage;\r\n//\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport ApiService from \"../../service/ApiService\";\r\nimport { useCart } from \"../context/CartContext\";\r\nimport PayPalButton from '../../component/future features/PayPalButton'; // Import your PayPalButton\r\nimport '../../style/cartPage.css';\r\n\r\nconst CartPage = () => {\r\n    const { cart, dispatch } = useCart();\r\n    const [message, setMessage] = useState(null);\r\n    const [paymentMethod, setPaymentMethod] = useState('cod'); // Default to Cash on Delivery\r\n    const [address, setAddress] = useState(''); // State to store the address\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const incrementItem = (product) => {\r\n        dispatch({ type: 'INCREMENT_ITEM', payload: product });\r\n    };\r\n\r\n    const decrementItem = (product) => {\r\n        const cartItem = cart.find(item => item.id === product.id);\r\n        if (cartItem && cartItem.quantity > 1) {\r\n            dispatch({ type: 'DECREMENT_ITEM', payload: product });\r\n        } else {\r\n            dispatch({ type: 'REMOVE_ITEM', payload: product });\r\n        }\r\n    };\r\n\r\n    const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\r\n\r\n    // Load address from local storage when component mounts\r\n    useEffect(() => {\r\n        const savedAddress = localStorage.getItem(\"address\");\r\n        if (savedAddress) {\r\n            setAddress(savedAddress); // Set address state from local storage\r\n        }\r\n    }, []);\r\n\r\n    const handleAddAddress = (newAddress) => {\r\n        setAddress(newAddress); // Update the address state\r\n        localStorage.setItem(\"address\", newAddress); // Save to local storage\r\n    };\r\n\r\n    const handleCheckout = async () => {\r\n        const confirmPlaceOrder = window.confirm(\"Do you want to place the order?\");\r\n        if (!confirmPlaceOrder) {\r\n            return; // If the user cancels, exit the function\r\n        }\r\n\r\n        const orderItems = cart.map(item => ({\r\n            productId: item.id,\r\n            quantity: item.quantity\r\n        }));\r\n\r\n        const orderRequest = {\r\n            totalPrice,\r\n            items: orderItems,\r\n            paymentMethod, // Use the selected payment method\r\n            address // Include the address in the order request\r\n        };\r\n\r\n        try {\r\n            const response = await ApiService.createOrder(orderRequest);\r\n            setMessage(response.message);\r\n            if (response.status === 200) {\r\n                dispatch({ type: 'CLEAR_CART' });\r\n                localStorage.removeItem(\"address\"); // Clear address from local storage on successful order\r\n                navigate(\"/order-confirmation\"); // Navigate to an order confirmation page\r\n            }\r\n        } catch (error) {\r\n            setMessage(error.response?.data?.message || error.message || 'Failed to place an order');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"cart-page\">\r\n            <h1>Cart</h1>\r\n            {message && <p className=\"response-message\">{message}</p>}\r\n\r\n            {cart.length === 0 ? (\r\n                <p>Your cart is empty</p>\r\n            ) : (\r\n                <div>\r\n                    <ul>\r\n                        {cart.map(item => (\r\n                            <li key={item.id} className=\"cart-item\">\r\n                                <img src={item.imageUrl} alt={item.name} />\r\n                                <div className=\"cart-item-details\">\r\n                                    <h2>{item.name}</h2>\r\n                                    <p>{item.description}</p>\r\n                                    <span>${item.price.toFixed(2)}</span>\r\n                                </div>\r\n                                <div className=\"quantity-controls\">\r\n                                    <button onClick={() => decrementItem(item)}>-</button>\r\n                                    <span>{item.quantity}</span>\r\n                                    <button onClick={() => incrementItem(item)}>+</button>\r\n                                </div>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                    <h2>Total: ${totalPrice.toFixed(2)}</h2>\r\n\r\n                    {address ? (\r\n                        <div className=\"payment-options\">\r\n                            <label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    value=\"paypal\"\r\n                                    checked={paymentMethod === 'paypal'}\r\n                                    onChange={() => setPaymentMethod('paypal')}\r\n                                />\r\n                                PayPal\r\n                            </label>\r\n                            <label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    value=\"cod\"\r\n                                    checked={paymentMethod === 'cod'}\r\n                                    onChange={() => setPaymentMethod('cod')}\r\n                                />\r\n                                Cash on Delivery\r\n                            </label>\r\n\r\n                            {/* Show PayPal button only if PayPal is selected */}\r\n                            {paymentMethod === 'paypal' && <PayPalButton totalAmount={totalPrice} />}\r\n\r\n                            {/* Place order button for Cash on Delivery only */}\r\n                            {paymentMethod === 'cod' && (\r\n                                <button className=\"checkout-button\" onClick={handleCheckout}>\r\n                                    Place Order\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    ) : (\r\n                        <button onClick={() => navigate('/add-address')} className=\"add-address-button\">\r\n                            Add Address\r\n                        </button> // Button to add address\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CartPage;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}