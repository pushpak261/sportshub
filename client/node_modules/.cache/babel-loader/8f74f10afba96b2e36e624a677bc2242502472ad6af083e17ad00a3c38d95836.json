{"ast":null,"code":"var _jsxFileName = \"D:\\\\sportshub\\\\client\\\\src\\\\component\\\\common\\\\Pagination.jsx\";\n// import React from \"react\";\n//\n// import '../../style/pagination.css';\n//\n// const Pagination = ({currentPage, totalPages, onPageChange}) => {\n//\n//     const pageNumbers = [];\n//     for(let i = 1; i <= totalPages; i++){\n//         pageNumbers.push(i);\n//     }\n//\n//     return(\n//         <div className=\"pagination\">\n//             {pageNumbers.map((number)=>(\n//                 <button\n//                     key={number}\n//                     onClick={() => onPageChange(number)}\n//                     className={number === currentPage ? 'active' : ''}\n//                 >\n//                     {number}\n//\n//                 </button>\n//             ))}\n//         </div>\n//     )\n// }\n// export default Pagination;\n\n//\n// import React from \"react\";\n// import '../../style/pagination.css';\n//\n// const Pagination = ({ currentPage, totalPages, onPageChange }) => {\n//     const pageNumbers = [];\n//\n//     // Determine the range of page numbers to display\n//     const maxPageButtons = 5; // Maximum number of buttons to display\n//     const half = Math.floor(maxPageButtons / 2);\n//\n//     let startPage = Math.max(1, currentPage - half);\n//     let endPage = Math.min(totalPages, currentPage + half);\n//\n//     // Adjust the start and end pages if there are fewer than max buttons\n//     if (endPage - startPage < maxPageButtons - 1) {\n//         if (startPage === 1) {\n//             endPage = Math.min(totalPages, startPage + maxPageButtons - 1);\n//         } else {\n//             startPage = Math.max(1, endPage - maxPageButtons + 1);\n//         }\n//     }\n//\n//     // Populate the page numbers array\n//     for (let i = startPage; i <= endPage; i++) {\n//         pageNumbers.push(i);\n//     }\n//\n//     return (\n//         <div className=\"pagination\">\n//             {startPage > 1 && (\n//                 <>\n//                     <button onClick={() => onPageChange(1)}>1</button>\n//                     {startPage > 2 && <span className=\"ellipsis\">...</span>}\n//                 </>\n//             )}\n//             {pageNumbers.map((number) => (\n//                 <button\n//                     key={number}\n//                     onClick={() => onPageChange(number)}\n//                     className={number === currentPage ? 'active' : ''}\n//                 >\n//                     {number}\n//                 </button>\n//             ))}\n//             {endPage < totalPages && (\n//                 <>\n//                     {endPage < totalPages - 1 && <span className=\"ellipsis\">...</span>}\n//                     <button onClick={() => onPageChange(totalPages)}>{totalPages}</button>\n//                 </>\n//             )}\n//         </div>\n//     );\n// };\n//\n// export default Pagination;\n\nimport React from \"react\";\nimport '../../style/pagination.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Pagination = ({\n  currentPage,\n  totalPages,\n  onPageChange\n}) => {\n  const pageNumbers = [];\n  const maxPageButtons = 5; // Maximum number of buttons to display\n  const half = Math.floor(maxPageButtons / 2);\n  let startPage = Math.max(1, currentPage - half);\n  let endPage = Math.min(totalPages, currentPage + half);\n\n  // Adjust the start and end pages if there are fewer than max buttons\n  if (endPage - startPage < maxPageButtons - 1) {\n    if (startPage === 1) {\n      endPage = Math.min(totalPages, startPage + maxPageButtons - 1);\n    } else {\n      startPage = Math.max(1, endPage - maxPageButtons + 1);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagination\",\n    children: [startPage > 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onPageChange(1),\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this), startPage > 2 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"more-button\",\n        disabled: true,\n        children: \"More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true), pageNumbers.map(number => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onPageChange(number),\n      className: number === currentPage ? 'active' : '',\n      children: number\n    }, number, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this)), endPage < totalPages && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [endPage < totalPages - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"more-button\",\n        disabled: true,\n        children: \"More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 50\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onPageChange(totalPages),\n        children: totalPages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n_c = Pagination;\nexport default Pagination;\nvar _c;\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Pagination","currentPage","totalPages","onPageChange","pageNumbers","maxPageButtons","half","Math","floor","startPage","max","endPage","min","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","map","number","_c","$RefreshReg$"],"sources":["D:/sportshub/client/src/component/common/Pagination.jsx"],"sourcesContent":["// import React from \"react\";\r\n//\r\n// import '../../style/pagination.css';\r\n//\r\n// const Pagination = ({currentPage, totalPages, onPageChange}) => {\r\n//\r\n//     const pageNumbers = [];\r\n//     for(let i = 1; i <= totalPages; i++){\r\n//         pageNumbers.push(i);\r\n//     }\r\n//\r\n//     return(\r\n//         <div className=\"pagination\">\r\n//             {pageNumbers.map((number)=>(\r\n//                 <button\r\n//                     key={number}\r\n//                     onClick={() => onPageChange(number)}\r\n//                     className={number === currentPage ? 'active' : ''}\r\n//                 >\r\n//                     {number}\r\n//\r\n//                 </button>\r\n//             ))}\r\n//         </div>\r\n//     )\r\n// }\r\n// export default Pagination;\r\n\r\n\r\n//\r\n// import React from \"react\";\r\n// import '../../style/pagination.css';\r\n//\r\n// const Pagination = ({ currentPage, totalPages, onPageChange }) => {\r\n//     const pageNumbers = [];\r\n//\r\n//     // Determine the range of page numbers to display\r\n//     const maxPageButtons = 5; // Maximum number of buttons to display\r\n//     const half = Math.floor(maxPageButtons / 2);\r\n//\r\n//     let startPage = Math.max(1, currentPage - half);\r\n//     let endPage = Math.min(totalPages, currentPage + half);\r\n//\r\n//     // Adjust the start and end pages if there are fewer than max buttons\r\n//     if (endPage - startPage < maxPageButtons - 1) {\r\n//         if (startPage === 1) {\r\n//             endPage = Math.min(totalPages, startPage + maxPageButtons - 1);\r\n//         } else {\r\n//             startPage = Math.max(1, endPage - maxPageButtons + 1);\r\n//         }\r\n//     }\r\n//\r\n//     // Populate the page numbers array\r\n//     for (let i = startPage; i <= endPage; i++) {\r\n//         pageNumbers.push(i);\r\n//     }\r\n//\r\n//     return (\r\n//         <div className=\"pagination\">\r\n//             {startPage > 1 && (\r\n//                 <>\r\n//                     <button onClick={() => onPageChange(1)}>1</button>\r\n//                     {startPage > 2 && <span className=\"ellipsis\">...</span>}\r\n//                 </>\r\n//             )}\r\n//             {pageNumbers.map((number) => (\r\n//                 <button\r\n//                     key={number}\r\n//                     onClick={() => onPageChange(number)}\r\n//                     className={number === currentPage ? 'active' : ''}\r\n//                 >\r\n//                     {number}\r\n//                 </button>\r\n//             ))}\r\n//             {endPage < totalPages && (\r\n//                 <>\r\n//                     {endPage < totalPages - 1 && <span className=\"ellipsis\">...</span>}\r\n//                     <button onClick={() => onPageChange(totalPages)}>{totalPages}</button>\r\n//                 </>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default Pagination;\r\n\r\n\r\nimport React from \"react\";\r\nimport '../../style/pagination.css';\r\n\r\nconst Pagination = ({ currentPage, totalPages, onPageChange }) => {\r\n    const pageNumbers = [];\r\n    const maxPageButtons = 5; // Maximum number of buttons to display\r\n    const half = Math.floor(maxPageButtons / 2);\r\n\r\n    let startPage = Math.max(1, currentPage - half);\r\n    let endPage = Math.min(totalPages, currentPage + half);\r\n\r\n    // Adjust the start and end pages if there are fewer than max buttons\r\n    if (endPage - startPage < maxPageButtons - 1) {\r\n        if (startPage === 1) {\r\n            endPage = Math.min(totalPages, startPage + maxPageButtons - 1);\r\n        } else {\r\n            startPage = Math.max(1, endPage - maxPageButtons + 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"pagination\">\r\n            {startPage > 1 && (\r\n                <>\r\n                    <button onClick={() => onPageChange(1)}>1</button>\r\n                    {startPage > 2 && <button className=\"more-button\" disabled>More</button>}\r\n                </>\r\n            )}\r\n            {pageNumbers.map((number) => (\r\n                <button\r\n                    key={number}\r\n                    onClick={() => onPageChange(number)}\r\n                    className={number === currentPage ? 'active' : ''}\r\n                >\r\n                    {number}\r\n                </button>\r\n            ))}\r\n            {endPage < totalPages && (\r\n                <>\r\n                    {endPage < totalPages - 1 && <button className=\"more-button\" disabled>More</button>}\r\n                    <button onClick={() => onPageChange(totalPages)}>{totalPages}</button>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}