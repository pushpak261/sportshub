{"ast":null,"code":"// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\n//\n// const CartContext = createContext();\n//\n// const initialState = {\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\n// }\n//\n//\n// const cartReducer = (state, action) =>{\n//     switch(action.type){\n//         case 'ADD_ITEM': {\n//             //identify exisitng item\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\n//             let newCart;\n//\n//             if(existingItem){\n//                 newCart = state.cart.map(item =>\n//                     item.id === action.payload.id\n//                         ? {...item, quantity: item.quantity + 1}\n//                         : item\n//                 );\n//             }else {\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\n//             }\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'REMOVE_ITEM':{\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'INCREMENT_ITEM': {\n//             const newCart = state.cart.map(item=>\n//                 item.id === action.payload.id\n//                     ? {...item, quantity: item.quantity + 1}\n//                     :item\n//             );\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'DECREMENT_ITEM': {\n//             const newCart = state.cart.map(item =>\n//                 item.id === action.payload.id && item.quantity > 1\n//                     ? {...item, quantity: item.quantity -1}\n//                     :item\n//             )\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'CLEAR_CART': {\n//             localStorage.removeItem('cart');\n//             return {...state, cart:[]};\n//         }\n//         default:\n//             return state;\n//     }\n// };\n//\n//\n//\n//\n// export const CartProvider = ({children}) => {\n//\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\n//\n//\n//     useEffect(() =>{\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\n//     }, [state.cart]);\n//\n//     return (\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n//\n// export const useCart = () => useContext(CartContext);\n//\n//\n\n//\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\n//\n// const CartContext = createContext();\n//\n// const initialState = {\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\n// }\n//\n//\n// const cartReducer = (state, action) =>{\n//     switch(action.type){\n//         case 'ADD_ITEM': {\n//             //identify exisitng item\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\n//             let newCart;\n//\n//             if(existingItem){\n//                 newCart = state.cart.map(item =>\n//                     item.id === action.payload.id\n//                         ? {...item, quantity: item.quantity + 1}\n//                         : item\n//                 );\n//             }else {\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\n//             }\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'REMOVE_ITEM':{\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'INCREMENT_ITEM': {\n//             const newCart = state.cart.map(item=>\n//                 item.id === action.payload.id\n//                     ? {...item, quantity: item.quantity + 1}\n//                     :item\n//             );\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'DECREMENT_ITEM': {\n//             const newCart = state.cart.map(item =>\n//                 item.id === action.payload.id && item.quantity > 1\n//                     ? {...item, quantity: item.quantity -1}\n//                     :item\n//             )\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'CLEAR_CART': {\n//             localStorage.removeItem('cart');\n//             return {...state, cart:[]};\n//         }\n//         default:\n//             return state;\n//     }\n// };\n//\n//\n//\n//\n// export const CartProvider = ({children}) => {\n//\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\n//\n//\n//     useEffect(() =>{\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\n//     }, [state.cart]);\n//\n//     return (\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n//\n// export const useCart = () => useContext(CartContext);\n//\n\n//\n// import React, { createContext, useReducer, useContext, useEffect } from \"react\";\n//\n// const CartContext = createContext();\n//\n// const cartReducer = (state, action) => {\n//     switch (action.type) {\n//         case 'ADD_ITEM': {\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\n//             let newCart;\n//\n//             if (existingItem) {\n//                 newCart = state.cart.map(item =>\n//                     item.id === action.payload.id\n//                         ? { ...item, quantity: item.quantity + 1 }\n//                         : item\n//                 );\n//             } else {\n//                 newCart = [...state.cart, { ...action.payload, quantity: 1 }];\n//             }\n//\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\n//             return { ...state, cart: newCart };\n//         }\n//         case 'REMOVE_ITEM': {\n//             const newCart = state.cart.filter(item => item.id !== action.payload.id);\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\n//             return { ...state, cart: newCart };\n//         }\n//         case 'CLEAR_CART': {\n//             localStorage.removeItem(`cart_${state.userId}`);\n//             return { ...state, cart: [] };\n//         }\n//         case 'SET_USER': {\n//             const storedCart = JSON.parse(localStorage.getItem(`cart_${action.payload}`)) || [];\n//             return { ...state, userId: action.payload, cart: storedCart };\n//         }\n//         default:\n//             return state;\n//     }\n// };\n//\n// export const CartProvider = ({ children }) => {\n//     const [state, dispatch] = useReducer(cartReducer, { cart: [], userId: null });\n//\n//     useEffect(() => {\n//         if (state.userId) {\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(state.cart));\n//         }\n//     }, [state.cart, state.userId]);\n//\n//     return (\n//         <CartContext.Provider value={{ cart: state.cart, dispatch, setUser: (id) => dispatch({ type: 'SET_USER', payload: id }) }}>\n//             {children}\n//         </CartContext.Provider>\n//     );\n// };\n//\n// export const useCart = () => useContext(CartContext);\n//\n\nimport axios from \"axios\";\nexport default class ApiService {\n  static getHeader() {\n    const token = localStorage.getItem(\"token\");\n    return {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    };\n  }\n\n  /** AUTH & USERS API */\n  static async registerUser(registration) {\n    try {\n      const response = await axios.post(`${this.BASE_URL}/auth/register`, registration);\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error registering user:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  }\n  static async loginUser(loginDetails) {\n    try {\n      const response = await axios.post(`${this.BASE_URL}/auth/login`, loginDetails);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Error logging in:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  }\n  static async getLoggedInUserInfo() {\n    try {\n      const response = await axios.get(`${this.BASE_URL}/user/my-info`, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      console.error(\"Error fetching logged-in user info:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n      throw error;\n    }\n  }\n\n  /** PRODUCT ENDPOINT */\n  static async addProduct(formData) {\n    try {\n      const response = await axios.post(`${this.BASE_URL}/product/create`, formData, {\n        headers: {\n          ...this.getHeader(),\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      console.error(\"Error adding product:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n      throw error;\n    }\n  }\n  static async getAllProducts() {\n    try {\n      const response = await axios.get(`${this.BASE_URL}/product/get-all`);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      console.error(\"Error fetching all products:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n      throw error;\n    }\n  }\n\n  // Add similar try-catch to other API calls for more clarity on errors.\n\n  /** CART METHODS */\n  static async getCartByUserId(userId) {\n    try {\n      const response = await axios.get(`${this.BASE_URL}/cart/user/${userId}`, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      console.error(\"Error fetching cart by user ID:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n      throw error;\n    }\n  }\n  static async addToCart(userId, productId, quantity) {\n    try {\n      const response = await axios.post(`${this.BASE_URL}/cart/add`, {\n        userId,\n        productId,\n        quantity\n      }, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      console.error(\"Error adding item to cart:\", ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n      throw error;\n    }\n  }\n  static async updateCartItem(cartId, quantity) {\n    try {\n      const response = await axios.put(`${this.BASE_URL}/cart/update/${cartId}`, null, {\n        headers: this.getHeader(),\n        params: {\n          quantity\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      console.error(\"Error updating cart item:\", ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message);\n      throw error;\n    }\n  }\n  static async removeCartItem(cartId) {\n    try {\n      const response = await axios.delete(`${this.BASE_URL}/cart/remove/${cartId}`, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      console.error(\"Error removing cart item:\", ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message);\n      throw error;\n    }\n  }\n}\nApiService.BASE_URL = \"http://localhost:2424\";","map":{"version":3,"names":["axios","ApiService","getHeader","token","localStorage","getItem","Authorization","registerUser","registration","response","post","BASE_URL","data","error","_error$response","console","message","loginUser","loginDetails","_error$response2","getLoggedInUserInfo","get","headers","_error$response3","addProduct","formData","_error$response4","getAllProducts","_error$response5","getCartByUserId","userId","_error$response6","addToCart","productId","quantity","_error$response7","updateCartItem","cartId","put","params","_error$response8","removeCartItem","delete","_error$response9"],"sources":["D:/project modifications/sportshub/client/src/component/context/CartContext.js"],"sourcesContent":["// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\r\n//\r\n// const CartContext = createContext();\r\n//\r\n// const initialState = {\r\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\r\n// }\r\n//\r\n//\r\n// const cartReducer = (state, action) =>{\r\n//     switch(action.type){\r\n//         case 'ADD_ITEM': {\r\n//             //identify exisitng item\r\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n//             let newCart;\r\n//\r\n//             if(existingItem){\r\n//                 newCart = state.cart.map(item =>\r\n//                     item.id === action.payload.id\r\n//                         ? {...item, quantity: item.quantity + 1}\r\n//                         : item\r\n//                 );\r\n//             }else {\r\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\r\n//             }\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'REMOVE_ITEM':{\r\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'INCREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item=>\r\n//                 item.id === action.payload.id\r\n//                     ? {...item, quantity: item.quantity + 1}\r\n//                     :item\r\n//             );\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'DECREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item =>\r\n//                 item.id === action.payload.id && item.quantity > 1\r\n//                     ? {...item, quantity: item.quantity -1}\r\n//                     :item\r\n//             )\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'CLEAR_CART': {\r\n//             localStorage.removeItem('cart');\r\n//             return {...state, cart:[]};\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n//\r\n//\r\n//\r\n//\r\n// export const CartProvider = ({children}) => {\r\n//\r\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\r\n//\r\n//\r\n//     useEffect(() =>{\r\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\r\n//     }, [state.cart]);\r\n//\r\n//     return (\r\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     )\r\n// }\r\n//\r\n// export const useCart = () => useContext(CartContext);\r\n//\r\n//\r\n\r\n//\r\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\r\n//\r\n// const CartContext = createContext();\r\n//\r\n// const initialState = {\r\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\r\n// }\r\n//\r\n//\r\n// const cartReducer = (state, action) =>{\r\n//     switch(action.type){\r\n//         case 'ADD_ITEM': {\r\n//             //identify exisitng item\r\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n//             let newCart;\r\n//\r\n//             if(existingItem){\r\n//                 newCart = state.cart.map(item =>\r\n//                     item.id === action.payload.id\r\n//                         ? {...item, quantity: item.quantity + 1}\r\n//                         : item\r\n//                 );\r\n//             }else {\r\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\r\n//             }\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'REMOVE_ITEM':{\r\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'INCREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item=>\r\n//                 item.id === action.payload.id\r\n//                     ? {...item, quantity: item.quantity + 1}\r\n//                     :item\r\n//             );\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'DECREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item =>\r\n//                 item.id === action.payload.id && item.quantity > 1\r\n//                     ? {...item, quantity: item.quantity -1}\r\n//                     :item\r\n//             )\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'CLEAR_CART': {\r\n//             localStorage.removeItem('cart');\r\n//             return {...state, cart:[]};\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n//\r\n//\r\n//\r\n//\r\n// export const CartProvider = ({children}) => {\r\n//\r\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\r\n//\r\n//\r\n//     useEffect(() =>{\r\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\r\n//     }, [state.cart]);\r\n//\r\n//     return (\r\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     )\r\n// }\r\n//\r\n// export const useCart = () => useContext(CartContext);\r\n//\r\n\r\n//\r\n// import React, { createContext, useReducer, useContext, useEffect } from \"react\";\r\n//\r\n// const CartContext = createContext();\r\n//\r\n// const cartReducer = (state, action) => {\r\n//     switch (action.type) {\r\n//         case 'ADD_ITEM': {\r\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n//             let newCart;\r\n//\r\n//             if (existingItem) {\r\n//                 newCart = state.cart.map(item =>\r\n//                     item.id === action.payload.id\r\n//                         ? { ...item, quantity: item.quantity + 1 }\r\n//                         : item\r\n//                 );\r\n//             } else {\r\n//                 newCart = [...state.cart, { ...action.payload, quantity: 1 }];\r\n//             }\r\n//\r\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\r\n//             return { ...state, cart: newCart };\r\n//         }\r\n//         case 'REMOVE_ITEM': {\r\n//             const newCart = state.cart.filter(item => item.id !== action.payload.id);\r\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\r\n//             return { ...state, cart: newCart };\r\n//         }\r\n//         case 'CLEAR_CART': {\r\n//             localStorage.removeItem(`cart_${state.userId}`);\r\n//             return { ...state, cart: [] };\r\n//         }\r\n//         case 'SET_USER': {\r\n//             const storedCart = JSON.parse(localStorage.getItem(`cart_${action.payload}`)) || [];\r\n//             return { ...state, userId: action.payload, cart: storedCart };\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n//\r\n// export const CartProvider = ({ children }) => {\r\n//     const [state, dispatch] = useReducer(cartReducer, { cart: [], userId: null });\r\n//\r\n//     useEffect(() => {\r\n//         if (state.userId) {\r\n//             localStorage.setItem(`cart_${state.userId}`, JSON.stringify(state.cart));\r\n//         }\r\n//     }, [state.cart, state.userId]);\r\n//\r\n//     return (\r\n//         <CartContext.Provider value={{ cart: state.cart, dispatch, setUser: (id) => dispatch({ type: 'SET_USER', payload: id }) }}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     );\r\n// };\r\n//\r\n// export const useCart = () => useContext(CartContext);\r\n//\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default class ApiService {\r\n    static BASE_URL = \"http://localhost:2424\";\r\n\r\n    static getHeader() {\r\n        const token = localStorage.getItem(\"token\");\r\n        return {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\"\r\n        };\r\n    }\r\n\r\n    /** AUTH & USERS API */\r\n    static async registerUser(registration) {\r\n        try {\r\n            const response = await axios.post(`${this.BASE_URL}/auth/register`, registration);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error registering user:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async loginUser(loginDetails) {\r\n        try {\r\n            const response = await axios.post(`${this.BASE_URL}/auth/login`, loginDetails);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error logging in:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getLoggedInUserInfo() {\r\n        try {\r\n            const response = await axios.get(`${this.BASE_URL}/user/my-info`, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error fetching logged-in user info:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /** PRODUCT ENDPOINT */\r\n    static async addProduct(formData) {\r\n        try {\r\n            const response = await axios.post(`${this.BASE_URL}/product/create`, formData, {\r\n                headers: {\r\n                    ...this.getHeader(),\r\n                    \"Content-Type\": \"multipart/form-data\"\r\n                }\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error adding product:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getAllProducts() {\r\n        try {\r\n            const response = await axios.get(`${this.BASE_URL}/product/get-all`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error fetching all products:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Add similar try-catch to other API calls for more clarity on errors.\r\n\r\n    /** CART METHODS */\r\n    static async getCartByUserId(userId) {\r\n        try {\r\n            const response = await axios.get(`${this.BASE_URL}/cart/user/${userId}`, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error fetching cart by user ID:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async addToCart(userId, productId, quantity) {\r\n        try {\r\n            const response = await axios.post(`${this.BASE_URL}/cart/add`, {\r\n                userId,\r\n                productId,\r\n                quantity\r\n            }, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error adding item to cart:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async updateCartItem(cartId, quantity) {\r\n        try {\r\n            const response = await axios.put(`${this.BASE_URL}/cart/update/${cartId}`, null, {\r\n                headers: this.getHeader(),\r\n                params: { quantity }\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error updating cart item:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async removeCartItem(cartId) {\r\n        try {\r\n            const response = await axios.delete(`${this.BASE_URL}/cart/remove/${cartId}`, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error removing cart item:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}