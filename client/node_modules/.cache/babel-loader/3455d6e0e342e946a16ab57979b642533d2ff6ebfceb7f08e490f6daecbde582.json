{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ECS\\\\Desktop\\\\Projects\\\\sportshub\\\\client\\\\src\\\\component\\\\future features\\\\PayPalButton.jsx\";\n// import React from 'react';\n// import { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\n//\n// const PayPalButton = ({ totalAmount }) => {\n//     return (\n//         <PayPalScriptProvider options={{ \"client-id\": \"AQnZkbeWlWUtMrejlLoVqUf8d1bIlK28dOsb2vKrtjQ0lEvX8C5g1OowLPbKonCUmF0W_0zp7SvFw5VN\" }}>\n//             <PayPalButtons\n//                 createOrder={(data, actions) => {\n//                     return actions.order.create({\n//                         purchase_units: [{\n//                             amount: {\n//                                 value: totalAmount.toFixed(2), // Use the total amount from props\n//                             },\n//                         }],\n//                     });\n//                 }}\n//                 onApprove={async (data, actions) => {\n//                     const order = await actions.order.capture();\n//                     alert('Transaction completed by ' + order.payer.name.given_name);\n//                     // Optionally, you can clear the cart or redirect after successful payment\n//                 }}\n//                 onError={(err) => {\n//                     console.error('PayPal Checkout onError', err);\n//                 }}\n//             />\n//         </PayPalScriptProvider>\n//     );\n// };\n//\n// export default PayPalButton;\n//\n//\n\nimport React from 'react';\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PayPalButton = () => {\n  const testAmount = \"1.00\"; // Amount set to 1 INR\n\n  return /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n    options: {\n      \"client-id\": \"AQnZkbeWlWUtMrejlLoVqUf8d1bIlK28dOsb2vKrtjQ0lEvX8C5g1OowLPbKonCUmF0W_0zp7SvFw5VN\"\n    },\n    children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n      createOrder: (data, actions) => {\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              currency_code: \"INR\",\n              value: testAmount\n            }\n          }],\n          application_context: {\n            // Specify payment options\n            payment_method: {\n              payer_selected: \"PAYPAL\",\n              payee_preferred: \"IMMEDIATE_PAYMENT_REQUIRED\"\n            },\n            // Try to include UPI if it's available in your region/account\n            payment_options: {\n              allowed_payment_method: \"UPI\" // Request UPI as an option\n            }\n          }\n        });\n      },\n      onApprove: async (data, actions) => {\n        const order = await actions.order.capture();\n        alert('Transaction completed by ' + order.payer.name.given_name);\n      },\n      onError: err => {\n        console.error('PayPal Checkout onError', err);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_c = PayPalButton;\nexport default PayPalButton;\nvar _c;\n$RefreshReg$(_c, \"PayPalButton\");","map":{"version":3,"names":["React","PayPalScriptProvider","PayPalButtons","jsxDEV","_jsxDEV","PayPalButton","testAmount","options","children","createOrder","data","actions","order","create","purchase_units","amount","currency_code","value","application_context","payment_method","payer_selected","payee_preferred","payment_options","allowed_payment_method","onApprove","capture","alert","payer","name","given_name","onError","err","console","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ECS/Desktop/Projects/sportshub/client/src/component/future features/PayPalButton.jsx"],"sourcesContent":["// import React from 'react';\r\n// import { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\r\n//\r\n// const PayPalButton = ({ totalAmount }) => {\r\n//     return (\r\n//         <PayPalScriptProvider options={{ \"client-id\": \"AQnZkbeWlWUtMrejlLoVqUf8d1bIlK28dOsb2vKrtjQ0lEvX8C5g1OowLPbKonCUmF0W_0zp7SvFw5VN\" }}>\r\n//             <PayPalButtons\r\n//                 createOrder={(data, actions) => {\r\n//                     return actions.order.create({\r\n//                         purchase_units: [{\r\n//                             amount: {\r\n//                                 value: totalAmount.toFixed(2), // Use the total amount from props\r\n//                             },\r\n//                         }],\r\n//                     });\r\n//                 }}\r\n//                 onApprove={async (data, actions) => {\r\n//                     const order = await actions.order.capture();\r\n//                     alert('Transaction completed by ' + order.payer.name.given_name);\r\n//                     // Optionally, you can clear the cart or redirect after successful payment\r\n//                 }}\r\n//                 onError={(err) => {\r\n//                     console.error('PayPal Checkout onError', err);\r\n//                 }}\r\n//             />\r\n//         </PayPalScriptProvider>\r\n//     );\r\n// };\r\n//\r\n// export default PayPalButton;\r\n//\r\n//\r\n\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\r\n\r\nconst PayPalButton = () => {\r\n    const testAmount = \"1.00\"; // Amount set to 1 INR\r\n\r\n    return (\r\n        <PayPalScriptProvider options={{ \"client-id\": \"AQnZkbeWlWUtMrejlLoVqUf8d1bIlK28dOsb2vKrtjQ0lEvX8C5g1OowLPbKonCUmF0W_0zp7SvFw5VN\" }}>\r\n            <PayPalButtons\r\n                createOrder={(data, actions) => {\r\n                    return actions.order.create({\r\n                        purchase_units: [{\r\n                            amount: {\r\n                                currency_code: \"INR\",\r\n                                value: testAmount,\r\n                            },\r\n                        }],\r\n                        application_context: {\r\n                            // Specify payment options\r\n                            payment_method: {\r\n                                payer_selected: \"PAYPAL\",\r\n                                payee_preferred: \"IMMEDIATE_PAYMENT_REQUIRED\",\r\n                            },\r\n                            // Try to include UPI if it's available in your region/account\r\n                            payment_options: {\r\n                                allowed_payment_method: \"UPI\", // Request UPI as an option\r\n                            },\r\n                        },\r\n                    });\r\n                }}\r\n                onApprove={async (data, actions) => {\r\n                    const order = await actions.order.capture();\r\n                    alert('Transaction completed by ' + order.payer.name.given_name);\r\n                }}\r\n                onError={(err) => {\r\n                    console.error('PayPal Checkout onError', err);\r\n                }}\r\n            />\r\n        </PayPalScriptProvider>\r\n    );\r\n};\r\n\r\nexport default PayPalButton;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,oBAAoB,EAAEC,aAAa,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB,MAAMC,UAAU,GAAG,MAAM,CAAC,CAAC;;EAE3B,oBACIF,OAAA,CAACH,oBAAoB;IAACM,OAAO,EAAE;MAAE,WAAW,EAAE;IAAmF,CAAE;IAAAC,QAAA,eAC/HJ,OAAA,CAACF,aAAa;MACVO,WAAW,EAAEA,CAACC,IAAI,EAAEC,OAAO,KAAK;QAC5B,OAAOA,OAAO,CAACC,KAAK,CAACC,MAAM,CAAC;UACxBC,cAAc,EAAE,CAAC;YACbC,MAAM,EAAE;cACJC,aAAa,EAAE,KAAK;cACpBC,KAAK,EAAEX;YACX;UACJ,CAAC,CAAC;UACFY,mBAAmB,EAAE;YACjB;YACAC,cAAc,EAAE;cACZC,cAAc,EAAE,QAAQ;cACxBC,eAAe,EAAE;YACrB,CAAC;YACD;YACAC,eAAe,EAAE;cACbC,sBAAsB,EAAE,KAAK,CAAE;YACnC;UACJ;QACJ,CAAC,CAAC;MACN,CAAE;MACFC,SAAS,EAAE,MAAAA,CAAOd,IAAI,EAAEC,OAAO,KAAK;QAChC,MAAMC,KAAK,GAAG,MAAMD,OAAO,CAACC,KAAK,CAACa,OAAO,CAAC,CAAC;QAC3CC,KAAK,CAAC,2BAA2B,GAAGd,KAAK,CAACe,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC;MACpE,CAAE;MACFC,OAAO,EAAGC,GAAG,IAAK;QACdC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MACjD;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAE/B,CAAC;AAACC,EAAA,GArCIjC,YAAY;AAuClB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}