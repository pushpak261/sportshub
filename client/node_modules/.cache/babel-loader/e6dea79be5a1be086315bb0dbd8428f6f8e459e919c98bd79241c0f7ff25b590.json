{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ECS\\\\Desktop\\\\Projects\\\\sportshub\\\\client\\\\src\\\\component\\\\pages\\\\CartPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import ApiService from \"../../service/ApiService\";\n// import { useCart } from \"../context/CartContext\";\n// import '../../style/cartPage.css'\n//\n// const CartPage = () => {\n//     const { cart, dispatch } = useCart();\n//     const [message, setMessage] = useState(null);\n//     const navigate = useNavigate();\n//\n//\n//     const incrementItem = (product) => {\n//         dispatch({ type: 'INCREMENT_ITEM', payload: product });\n//     }\n//\n//     const decrementItem = (product) => {\n//\n//         const cartItem = cart.find(item => item.id === product.id);\n//         if (cartItem && cartItem.quantity > 1) {\n//             dispatch({ type: 'DECREMENT_ITEM', payload: product });\n//         } else {\n//             dispatch({ type: 'REMOVE_ITEM', payload: product });\n//         }\n//     }\n//\n//     const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\n//\n//\n//\n//     const handleCheckout = async () => {\n//         if (!ApiService.isAuthenticated()) {\n//             setMessage(\"You need to login first before you can place an order\");\n//             setTimeout(() => {\n//                 setMessage('')\n//                 navigate(\"/login\")\n//             }, 3000);\n//             return;\n//         }\n//\n//         const orderItems = cart.map(item => ({\n//             productId: item.id,\n//             quantity: item.quantity\n//         }));\n//\n//         const orderRequest = {\n//             totalPrice,\n//             items: orderItems,\n//         }\n//\n//         try {\n//             const response = await ApiService.createOrder(orderRequest);\n//             setMessage(response.message)\n//\n//             setTimeout(() => {\n//                 setMessage('')\n//             }, 5000);\n//\n//             if (response.status === 200) {\n//                 dispatch({ type: 'CLEAR_CART' })\n//             }\n//\n//         } catch (error) {\n//             setMessage(error.response?.data?.message || error.message || 'Failed to place an order');\n//             setTimeout(() => {\n//                 setMessage('')\n//             }, 3000);\n//\n//         }\n//\n//     };\n//\n//\n//     return (\n//         <div className=\"cart-page\">\n//             <h1>Cart</h1>\n//             {message && <p className=\"response-message\">{message}</p>}\n//\n//             {cart.length === 0 ? (\n//                 <p>Your cart is empty</p>\n//             ) : (\n//                 <div>\n//                     <ul>\n//                         {cart.map(item => (\n//                             <li key={item.id}>\n//                                 <img src={item.imageUrl} alt={item.name} />\n//                                 <div>\n//                                     <h2>{item.name}</h2>\n//                                     <p>{item.description}</p>\n//                                     <div className=\"quantity-controls\">\n//                                         <button onClick={()=> decrementItem(item)}>-</button>\n//                                         <span>{item.quantity}</span>\n//                                         <button onClick={()=> incrementItem(item)}>+</button>\n//                                     </div>\n//                                     <span>${item.price.toFixed()}</span>\n//                                 </div>\n//                             </li>\n//                         ))}\n//                     </ul>\n//                     <h2>Total: ${totalPrice.toFixed(2)}</h2>\n//                     <button className=\"checkout-button\" onClick={handleCheckout}>Checkout</button>\n//                 </div>\n//             )}\n//         </div>\n//     )\n// }\n//\n// export default CartPage;\n\n/////////////////////////////////////////////\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import ApiService from \"../../service/ApiService\";\n// import { useCart } from \"../context/CartContext\";\n// import PayPalButton from '../../component/future features/PayPalButton'; // Import your PayPalButton\n// import '../../style/cartPage.css';\n//\n// const CartPage = () => {\n//     const { cart, dispatch } = useCart();\n//     const [message, setMessage] = useState(null);\n//     const [openPayPal, setOpenPayPal] = useState(false);\n//     const navigate = useNavigate();\n//     const location = useLocation();\n//\n//     const incrementItem = (product) => {\n//         dispatch({ type: 'INCREMENT_ITEM', payload: product });\n//     };\n//\n//     const decrementItem = (product) => {\n//         const cartItem = cart.find(item => item.id === product.id);\n//         if (cartItem && cartItem.quantity > 1) {\n//             dispatch({ type: 'DECREMENT_ITEM', payload: product });\n//         } else {\n//             dispatch({ type: 'REMOVE_ITEM', payload: product });\n//         }\n//     };\n//\n//     const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\n//\n//     useEffect(() => {\n//         if (location.state && location.state.addressSaved) {\n//             setOpenPayPal(true); // Open PayPal if the address was just saved\n//         }\n//     }, [location.state]);\n//\n//     return (\n//         <div className=\"cart-page\">\n//             <h1>Cart</h1>\n//             {message && <p className=\"response-message\">{message}</p>}\n//\n//             {cart.length === 0 ? (\n//                 <p>Your cart is empty</p>\n//             ) : (\n//                 <div>\n//                     <ul>\n//                         {cart.map(item => (\n//                             <li key={item.id} className=\"cart-item\">\n//                                 <img src={item.imageUrl} alt={item.name} />\n//                                 <div className=\"cart-item-details\">\n//                                     <h2>{item.name}</h2>\n//                                     <p>{item.description}</p>\n//                                     <span>${item.price.toFixed(2)}</span>\n//                                 </div>\n//                                 <div className=\"quantity-controls\">\n//                                     <button onClick={() => decrementItem(item)}>-</button>\n//                                     <span>{item.quantity}</span>\n//                                     <button onClick={() => incrementItem(item)}>+</button>\n//                                 </div>\n//                             </li>\n//                         ))}\n//                     </ul>\n//                     <h2>Total: ${totalPrice.toFixed(2)}</h2>\n//                     {openPayPal ? (\n//                         <PayPalButton totalAmount={totalPrice} /> // Open PayPal directly if address was saved\n//                     ) : (\n//                         <button onClick={() => navigate('/add-address')} className=\"add-address-button\">\n//                             Add Address\n//                         </button> // Button to add address\n//                     )}\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n//\n// export default CartPage;\n//\n//\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport ApiService from \"../../service/ApiService\";\nimport { useCart } from \"../context/CartContext\";\nimport PayPalButton from '../../component/future features/PayPalButton'; // Import your PayPalButton\nimport '../../style/cartPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartPage = () => {\n  _s();\n  const {\n    cart,\n    dispatch\n  } = useCart();\n  const [message, setMessage] = useState(null);\n  const [paymentMethod, setPaymentMethod] = useState('cod'); // Default to Cash on Delivery\n  const navigate = useNavigate();\n  const incrementItem = product => {\n    dispatch({\n      type: 'INCREMENT_ITEM',\n      payload: product\n    });\n  };\n  const decrementItem = product => {\n    const cartItem = cart.find(item => item.id === product.id);\n    if (cartItem && cartItem.quantity > 1) {\n      dispatch({\n        type: 'DECREMENT_ITEM',\n        payload: product\n      });\n    } else {\n      dispatch({\n        type: 'REMOVE_ITEM',\n        payload: product\n      });\n    }\n  };\n  const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\n  const handleCheckout = async orderRequest => {\n    try {\n      const response = await ApiService.createOrder(orderRequest);\n      setMessage(response.message);\n      if (response.status === 200) {\n        dispatch({\n          type: 'CLEAR_CART'\n        });\n        navigate(\"/order-confirmation\"); // Navigate to an order confirmation page\n      }\n      setTimeout(() => {\n        setMessage('');\n      }, 5000);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Failed to place an order');\n      setTimeout(() => {\n        setMessage('');\n      }, 3000);\n    }\n  };\n  useEffect(() => {\n    if (paymentMethod === 'paypal') {\n      // Create order for PayPal and trigger payment processing\n      const orderItems = cart.map(item => ({\n        productId: item.id,\n        quantity: item.quantity\n      }));\n      const orderRequest = {\n        totalPrice,\n        items: orderItems,\n        paymentMethod: 'PayPal' // Set payment method as PayPal\n      };\n      handleCheckout(orderRequest);\n    }\n  }, [paymentMethod, cart, totalPrice]); // Run effect when paymentMethod changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"response-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 25\n    }, this), cart.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your cart is empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: cart.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"cart-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.imageUrl,\n            alt: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cart-item-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", item.price.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"quantity-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => decrementItem(item),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: item.quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => incrementItem(item),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 33\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Total: $\", totalPrice.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment-options\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"paypal\",\n            checked: paymentMethod === 'paypal',\n            onChange: () => setPaymentMethod('paypal')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 29\n          }, this), \"PayPal\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"cod\",\n            checked: paymentMethod === 'cod',\n            onChange: () => setPaymentMethod('cod')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 29\n          }, this), \"Cash on Delivery\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 21\n      }, this), paymentMethod === 'paypal' && /*#__PURE__*/_jsxDEV(PayPalButton, {\n        totalAmount: totalPrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 52\n      }, this), \" \", paymentMethod === 'cod' && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"checkout-button\",\n        onClick: () => handleCheckout(),\n        children: \"Place order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 49\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 9\n  }, this);\n};\n_s(CartPage, \"pV9I4sGBuiqQkUOHoQan/rei3EM=\", false, function () {\n  return [useCart, useNavigate];\n});\n_c = CartPage;\nexport default CartPage;\nvar _c;\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","ApiService","useCart","PayPalButton","jsxDEV","_jsxDEV","CartPage","_s","cart","dispatch","message","setMessage","paymentMethod","setPaymentMethod","navigate","incrementItem","product","type","payload","decrementItem","cartItem","find","item","id","quantity","totalPrice","reduce","total","price","handleCheckout","orderRequest","response","createOrder","status","setTimeout","error","_error$response","_error$response$data","data","orderItems","map","productId","items","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","src","imageUrl","alt","name","description","toFixed","onClick","value","checked","onChange","totalAmount","_c","$RefreshReg$"],"sources":["C:/Users/ECS/Desktop/Projects/sportshub/client/src/component/pages/CartPage.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import ApiService from \"../../service/ApiService\";\r\n// import { useCart } from \"../context/CartContext\";\r\n// import '../../style/cartPage.css'\r\n//\r\n// const CartPage = () => {\r\n//     const { cart, dispatch } = useCart();\r\n//     const [message, setMessage] = useState(null);\r\n//     const navigate = useNavigate();\r\n//\r\n//\r\n//     const incrementItem = (product) => {\r\n//         dispatch({ type: 'INCREMENT_ITEM', payload: product });\r\n//     }\r\n//\r\n//     const decrementItem = (product) => {\r\n//\r\n//         const cartItem = cart.find(item => item.id === product.id);\r\n//         if (cartItem && cartItem.quantity > 1) {\r\n//             dispatch({ type: 'DECREMENT_ITEM', payload: product });\r\n//         } else {\r\n//             dispatch({ type: 'REMOVE_ITEM', payload: product });\r\n//         }\r\n//     }\r\n//\r\n//     const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\r\n//\r\n//\r\n//\r\n//     const handleCheckout = async () => {\r\n//         if (!ApiService.isAuthenticated()) {\r\n//             setMessage(\"You need to login first before you can place an order\");\r\n//             setTimeout(() => {\r\n//                 setMessage('')\r\n//                 navigate(\"/login\")\r\n//             }, 3000);\r\n//             return;\r\n//         }\r\n//\r\n//         const orderItems = cart.map(item => ({\r\n//             productId: item.id,\r\n//             quantity: item.quantity\r\n//         }));\r\n//\r\n//         const orderRequest = {\r\n//             totalPrice,\r\n//             items: orderItems,\r\n//         }\r\n//\r\n//         try {\r\n//             const response = await ApiService.createOrder(orderRequest);\r\n//             setMessage(response.message)\r\n//\r\n//             setTimeout(() => {\r\n//                 setMessage('')\r\n//             }, 5000);\r\n//\r\n//             if (response.status === 200) {\r\n//                 dispatch({ type: 'CLEAR_CART' })\r\n//             }\r\n//\r\n//         } catch (error) {\r\n//             setMessage(error.response?.data?.message || error.message || 'Failed to place an order');\r\n//             setTimeout(() => {\r\n//                 setMessage('')\r\n//             }, 3000);\r\n//\r\n//         }\r\n//\r\n//     };\r\n//\r\n//\r\n//     return (\r\n//         <div className=\"cart-page\">\r\n//             <h1>Cart</h1>\r\n//             {message && <p className=\"response-message\">{message}</p>}\r\n//\r\n//             {cart.length === 0 ? (\r\n//                 <p>Your cart is empty</p>\r\n//             ) : (\r\n//                 <div>\r\n//                     <ul>\r\n//                         {cart.map(item => (\r\n//                             <li key={item.id}>\r\n//                                 <img src={item.imageUrl} alt={item.name} />\r\n//                                 <div>\r\n//                                     <h2>{item.name}</h2>\r\n//                                     <p>{item.description}</p>\r\n//                                     <div className=\"quantity-controls\">\r\n//                                         <button onClick={()=> decrementItem(item)}>-</button>\r\n//                                         <span>{item.quantity}</span>\r\n//                                         <button onClick={()=> incrementItem(item)}>+</button>\r\n//                                     </div>\r\n//                                     <span>${item.price.toFixed()}</span>\r\n//                                 </div>\r\n//                             </li>\r\n//                         ))}\r\n//                     </ul>\r\n//                     <h2>Total: ${totalPrice.toFixed(2)}</h2>\r\n//                     <button className=\"checkout-button\" onClick={handleCheckout}>Checkout</button>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export default CartPage;\r\n\r\n\r\n/////////////////////////////////////////////\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n// import ApiService from \"../../service/ApiService\";\r\n// import { useCart } from \"../context/CartContext\";\r\n// import PayPalButton from '../../component/future features/PayPalButton'; // Import your PayPalButton\r\n// import '../../style/cartPage.css';\r\n//\r\n// const CartPage = () => {\r\n//     const { cart, dispatch } = useCart();\r\n//     const [message, setMessage] = useState(null);\r\n//     const [openPayPal, setOpenPayPal] = useState(false);\r\n//     const navigate = useNavigate();\r\n//     const location = useLocation();\r\n//\r\n//     const incrementItem = (product) => {\r\n//         dispatch({ type: 'INCREMENT_ITEM', payload: product });\r\n//     };\r\n//\r\n//     const decrementItem = (product) => {\r\n//         const cartItem = cart.find(item => item.id === product.id);\r\n//         if (cartItem && cartItem.quantity > 1) {\r\n//             dispatch({ type: 'DECREMENT_ITEM', payload: product });\r\n//         } else {\r\n//             dispatch({ type: 'REMOVE_ITEM', payload: product });\r\n//         }\r\n//     };\r\n//\r\n//     const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\r\n//\r\n//     useEffect(() => {\r\n//         if (location.state && location.state.addressSaved) {\r\n//             setOpenPayPal(true); // Open PayPal if the address was just saved\r\n//         }\r\n//     }, [location.state]);\r\n//\r\n//     return (\r\n//         <div className=\"cart-page\">\r\n//             <h1>Cart</h1>\r\n//             {message && <p className=\"response-message\">{message}</p>}\r\n//\r\n//             {cart.length === 0 ? (\r\n//                 <p>Your cart is empty</p>\r\n//             ) : (\r\n//                 <div>\r\n//                     <ul>\r\n//                         {cart.map(item => (\r\n//                             <li key={item.id} className=\"cart-item\">\r\n//                                 <img src={item.imageUrl} alt={item.name} />\r\n//                                 <div className=\"cart-item-details\">\r\n//                                     <h2>{item.name}</h2>\r\n//                                     <p>{item.description}</p>\r\n//                                     <span>${item.price.toFixed(2)}</span>\r\n//                                 </div>\r\n//                                 <div className=\"quantity-controls\">\r\n//                                     <button onClick={() => decrementItem(item)}>-</button>\r\n//                                     <span>{item.quantity}</span>\r\n//                                     <button onClick={() => incrementItem(item)}>+</button>\r\n//                                 </div>\r\n//                             </li>\r\n//                         ))}\r\n//                     </ul>\r\n//                     <h2>Total: ${totalPrice.toFixed(2)}</h2>\r\n//                     {openPayPal ? (\r\n//                         <PayPalButton totalAmount={totalPrice} /> // Open PayPal directly if address was saved\r\n//                     ) : (\r\n//                         <button onClick={() => navigate('/add-address')} className=\"add-address-button\">\r\n//                             Add Address\r\n//                         </button> // Button to add address\r\n//                     )}\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default CartPage;\r\n//\r\n//\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ApiService from \"../../service/ApiService\";\r\nimport { useCart } from \"../context/CartContext\";\r\nimport PayPalButton from '../../component/future features/PayPalButton'; // Import your PayPalButton\r\nimport '../../style/cartPage.css';\r\n\r\nconst CartPage = () => {\r\n    const { cart, dispatch } = useCart();\r\n    const [message, setMessage] = useState(null);\r\n    const [paymentMethod, setPaymentMethod] = useState('cod'); // Default to Cash on Delivery\r\n    const navigate = useNavigate();\r\n\r\n    const incrementItem = (product) => {\r\n        dispatch({ type: 'INCREMENT_ITEM', payload: product });\r\n    };\r\n\r\n    const decrementItem = (product) => {\r\n        const cartItem = cart.find(item => item.id === product.id);\r\n        if (cartItem && cartItem.quantity > 1) {\r\n            dispatch({ type: 'DECREMENT_ITEM', payload: product });\r\n        } else {\r\n            dispatch({ type: 'REMOVE_ITEM', payload: product });\r\n        }\r\n    };\r\n\r\n    const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\r\n\r\n    const handleCheckout = async (orderRequest) => {\r\n        try {\r\n            const response = await ApiService.createOrder(orderRequest);\r\n            setMessage(response.message);\r\n\r\n            if (response.status === 200) {\r\n                dispatch({ type: 'CLEAR_CART' });\r\n                navigate(\"/order-confirmation\"); // Navigate to an order confirmation page\r\n            }\r\n\r\n            setTimeout(() => {\r\n                setMessage('');\r\n            }, 5000);\r\n\r\n        } catch (error) {\r\n            setMessage(error.response?.data?.message || error.message || 'Failed to place an order');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n            }, 3000);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (paymentMethod === 'paypal') {\r\n            // Create order for PayPal and trigger payment processing\r\n            const orderItems = cart.map(item => ({\r\n                productId: item.id,\r\n                quantity: item.quantity\r\n            }));\r\n\r\n            const orderRequest = {\r\n                totalPrice,\r\n                items: orderItems,\r\n                paymentMethod: 'PayPal', // Set payment method as PayPal\r\n            };\r\n\r\n            handleCheckout(orderRequest);\r\n        }\r\n    }, [paymentMethod, cart, totalPrice]); // Run effect when paymentMethod changes\r\n\r\n    return (\r\n        <div className=\"cart-page\">\r\n            <h1>Cart</h1>\r\n            {message && <p className=\"response-message\">{message}</p>}\r\n\r\n            {cart.length === 0 ? (\r\n                <p>Your cart is empty</p>\r\n            ) : (\r\n                <div>\r\n                    <ul>\r\n                        {cart.map(item => (\r\n                            <li key={item.id} className=\"cart-item\">\r\n                                <img src={item.imageUrl} alt={item.name} />\r\n                                <div className=\"cart-item-details\">\r\n                                    <h2>{item.name}</h2>\r\n                                    <p>{item.description}</p>\r\n                                    <span>${item.price.toFixed(2)}</span>\r\n                                </div>\r\n                                <div className=\"quantity-controls\">\r\n                                    <button onClick={() => decrementItem(item)}>-</button>\r\n                                    <span>{item.quantity}</span>\r\n                                    <button onClick={() => incrementItem(item)}>+</button>\r\n                                </div>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                    <h2>Total: ${totalPrice.toFixed(2)}</h2>\r\n\r\n                    <div className=\"payment-options\">\r\n                        <label>\r\n                            <input\r\n                                type=\"radio\"\r\n                                value=\"paypal\"\r\n                                checked={paymentMethod === 'paypal'}\r\n                                onChange={() => setPaymentMethod('paypal')}\r\n                            />\r\n                            PayPal\r\n                        </label>\r\n                        <label>\r\n                            <input\r\n                                type=\"radio\"\r\n                                value=\"cod\"\r\n                                checked={paymentMethod === 'cod'}\r\n                                onChange={() => setPaymentMethod('cod')}\r\n                            />\r\n                            Cash on Delivery\r\n                        </label>\r\n                    </div>\r\n\r\n                    {paymentMethod === 'paypal' && <PayPalButton totalAmount={totalPrice} />} {/* Show PayPal button if selected */}\r\n                    {paymentMethod === 'cod' && <button className=\"checkout-button\" onClick={() => handleCheckout()}>Place order</button>}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CartPage;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}