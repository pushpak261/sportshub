{"ast":null,"code":"var _jsxFileName = \"D:\\\\project modifications\\\\sportshub\\\\client\\\\src\\\\component\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\n//\n// const CartContext = createContext();\n//\n// const initialState = {\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\n// }\n//\n//\n// const cartReducer = (state, action) =>{\n//     switch(action.type){\n//         case 'ADD_ITEM': {\n//             //identify exisitng item\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\n//             let newCart;\n//\n//             if(existingItem){\n//                 newCart = state.cart.map(item =>\n//                     item.id === action.payload.id\n//                         ? {...item, quantity: item.quantity + 1}\n//                         : item\n//                 );\n//             }else {\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\n//             }\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'REMOVE_ITEM':{\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'INCREMENT_ITEM': {\n//             const newCart = state.cart.map(item=>\n//                 item.id === action.payload.id\n//                     ? {...item, quantity: item.quantity + 1}\n//                     :item\n//             );\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'DECREMENT_ITEM': {\n//             const newCart = state.cart.map(item =>\n//                 item.id === action.payload.id && item.quantity > 1\n//                     ? {...item, quantity: item.quantity -1}\n//                     :item\n//             )\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'CLEAR_CART': {\n//             localStorage.removeItem('cart');\n//             return {...state, cart:[]};\n//         }\n//         default:\n//             return state;\n//     }\n// };\n//\n//\n//\n//\n// export const CartProvider = ({children}) => {\n//\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\n//\n//\n//     useEffect(() =>{\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\n//     }, [state.cart]);\n//\n//     return (\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n//\n// export const useCart = () => useContext(CartContext);\n//\n//\n\n//\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\n//\n// const CartContext = createContext();\n//\n// const initialState = {\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\n// }\n//\n//\n// const cartReducer = (state, action) =>{\n//     switch(action.type){\n//         case 'ADD_ITEM': {\n//             //identify exisitng item\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\n//             let newCart;\n//\n//             if(existingItem){\n//                 newCart = state.cart.map(item =>\n//                     item.id === action.payload.id\n//                         ? {...item, quantity: item.quantity + 1}\n//                         : item\n//                 );\n//             }else {\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\n//             }\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'REMOVE_ITEM':{\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'INCREMENT_ITEM': {\n//             const newCart = state.cart.map(item=>\n//                 item.id === action.payload.id\n//                     ? {...item, quantity: item.quantity + 1}\n//                     :item\n//             );\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'DECREMENT_ITEM': {\n//             const newCart = state.cart.map(item =>\n//                 item.id === action.payload.id && item.quantity > 1\n//                     ? {...item, quantity: item.quantity -1}\n//                     :item\n//             )\n//             localStorage.setItem('cart', JSON.stringify(newCart));\n//             return {...state, cart:newCart};\n//         }\n//\n//         case 'CLEAR_CART': {\n//             localStorage.removeItem('cart');\n//             return {...state, cart:[]};\n//         }\n//         default:\n//             return state;\n//     }\n// };\n//\n//\n//\n//\n// export const CartProvider = ({children}) => {\n//\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\n//\n//\n//     useEffect(() =>{\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\n//     }, [state.cart]);\n//\n//     return (\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n//\n// export const useCart = () => useContext(CartContext);\n//\n\nimport React, { createContext, useReducer, useContext, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      {\n        const existingItem = state.cart.find(item => item.id === action.payload.id);\n        let newCart;\n        if (existingItem) {\n          newCart = state.cart.map(item => item.id === action.payload.id ? {\n            ...item,\n            quantity: item.quantity + 1\n          } : item);\n        } else {\n          newCart = [...state.cart, {\n            ...action.payload,\n            quantity: 1\n          }];\n        }\n        localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\n        return {\n          ...state,\n          cart: newCart\n        };\n      }\n    case 'REMOVE_ITEM':\n      {\n        const newCart = state.cart.filter(item => item.id !== action.payload.id);\n        localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\n        return {\n          ...state,\n          cart: newCart\n        };\n      }\n    case 'CLEAR_CART':\n      {\n        localStorage.removeItem(`cart_${state.userId}`);\n        return {\n          ...state,\n          cart: []\n        };\n      }\n    case 'SET_USER':\n      {\n        const storedCart = JSON.parse(localStorage.getItem(`cart_${action.payload}`)) || [];\n        return {\n          ...state,\n          userId: action.payload,\n          cart: storedCart\n        };\n      }\n    default:\n      return state;\n  }\n};\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, {\n    cart: [],\n    userId: null\n  });\n  useEffect(() => {\n    if (state.userId) {\n      localStorage.setItem(`cart_${state.userId}`, JSON.stringify(state.cart));\n    }\n  }, [state.cart, state.userId]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart: state.cart,\n      dispatch,\n      setUser: id => dispatch({\n        type: 'SET_USER',\n        payload: id\n      })\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"+U6l3atc7kjGLA35ytRzeyZDsl4=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useContext","useEffect","jsxDEV","_jsxDEV","CartContext","cartReducer","state","action","type","existingItem","cart","find","item","id","payload","newCart","map","quantity","localStorage","setItem","userId","JSON","stringify","filter","removeItem","storedCart","parse","getItem","CartProvider","children","_s","dispatch","Provider","value","setUser","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["D:/project modifications/sportshub/client/src/component/context/CartContext.js"],"sourcesContent":["// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\r\n//\r\n// const CartContext = createContext();\r\n//\r\n// const initialState = {\r\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\r\n// }\r\n//\r\n//\r\n// const cartReducer = (state, action) =>{\r\n//     switch(action.type){\r\n//         case 'ADD_ITEM': {\r\n//             //identify exisitng item\r\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n//             let newCart;\r\n//\r\n//             if(existingItem){\r\n//                 newCart = state.cart.map(item =>\r\n//                     item.id === action.payload.id\r\n//                         ? {...item, quantity: item.quantity + 1}\r\n//                         : item\r\n//                 );\r\n//             }else {\r\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\r\n//             }\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'REMOVE_ITEM':{\r\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'INCREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item=>\r\n//                 item.id === action.payload.id\r\n//                     ? {...item, quantity: item.quantity + 1}\r\n//                     :item\r\n//             );\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'DECREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item =>\r\n//                 item.id === action.payload.id && item.quantity > 1\r\n//                     ? {...item, quantity: item.quantity -1}\r\n//                     :item\r\n//             )\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'CLEAR_CART': {\r\n//             localStorage.removeItem('cart');\r\n//             return {...state, cart:[]};\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n//\r\n//\r\n//\r\n//\r\n// export const CartProvider = ({children}) => {\r\n//\r\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\r\n//\r\n//\r\n//     useEffect(() =>{\r\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\r\n//     }, [state.cart]);\r\n//\r\n//     return (\r\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     )\r\n// }\r\n//\r\n// export const useCart = () => useContext(CartContext);\r\n//\r\n//\r\n\r\n//\r\n// import React, {createContext, useReducer, useContext, useEffect} from \"react\";\r\n//\r\n// const CartContext = createContext();\r\n//\r\n// const initialState = {\r\n//     cart: JSON.parse(localStorage.getItem('cart')) || [],\r\n// }\r\n//\r\n//\r\n// const cartReducer = (state, action) =>{\r\n//     switch(action.type){\r\n//         case 'ADD_ITEM': {\r\n//             //identify exisitng item\r\n//             const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n//             let newCart;\r\n//\r\n//             if(existingItem){\r\n//                 newCart = state.cart.map(item =>\r\n//                     item.id === action.payload.id\r\n//                         ? {...item, quantity: item.quantity + 1}\r\n//                         : item\r\n//                 );\r\n//             }else {\r\n//                 newCart = [...state.cart, {...action.payload, quantity: 1 }];\r\n//             }\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'REMOVE_ITEM':{\r\n//             const newCart = state.cart.filter(item=> item.id !== action.payload.id);\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'INCREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item=>\r\n//                 item.id === action.payload.id\r\n//                     ? {...item, quantity: item.quantity + 1}\r\n//                     :item\r\n//             );\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'DECREMENT_ITEM': {\r\n//             const newCart = state.cart.map(item =>\r\n//                 item.id === action.payload.id && item.quantity > 1\r\n//                     ? {...item, quantity: item.quantity -1}\r\n//                     :item\r\n//             )\r\n//             localStorage.setItem('cart', JSON.stringify(newCart));\r\n//             return {...state, cart:newCart};\r\n//         }\r\n//\r\n//         case 'CLEAR_CART': {\r\n//             localStorage.removeItem('cart');\r\n//             return {...state, cart:[]};\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n//\r\n//\r\n//\r\n//\r\n// export const CartProvider = ({children}) => {\r\n//\r\n//     const [state, dispatch] = useReducer(cartReducer, initialState);\r\n//\r\n//\r\n//     useEffect(() =>{\r\n//         localStorage.setItem('cart', JSON.stringify(state.cart));\r\n//     }, [state.cart]);\r\n//\r\n//     return (\r\n//         <CartContext.Provider value={{cart: state.cart, dispatch}}>\r\n//             {children}\r\n//         </CartContext.Provider>\r\n//     )\r\n// }\r\n//\r\n// export const useCart = () => useContext(CartContext);\r\n//\r\n\r\n\r\nimport React, { createContext, useReducer, useContext, useEffect } from \"react\";\r\n\r\nconst CartContext = createContext();\r\n\r\nconst cartReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_ITEM': {\r\n            const existingItem = state.cart.find(item => item.id === action.payload.id);\r\n            let newCart;\r\n\r\n            if (existingItem) {\r\n                newCart = state.cart.map(item =>\r\n                    item.id === action.payload.id\r\n                        ? { ...item, quantity: item.quantity + 1 }\r\n                        : item\r\n                );\r\n            } else {\r\n                newCart = [...state.cart, { ...action.payload, quantity: 1 }];\r\n            }\r\n\r\n            localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\r\n            return { ...state, cart: newCart };\r\n        }\r\n        case 'REMOVE_ITEM': {\r\n            const newCart = state.cart.filter(item => item.id !== action.payload.id);\r\n            localStorage.setItem(`cart_${state.userId}`, JSON.stringify(newCart));\r\n            return { ...state, cart: newCart };\r\n        }\r\n        case 'CLEAR_CART': {\r\n            localStorage.removeItem(`cart_${state.userId}`);\r\n            return { ...state, cart: [] };\r\n        }\r\n        case 'SET_USER': {\r\n            const storedCart = JSON.parse(localStorage.getItem(`cart_${action.payload}`)) || [];\r\n            return { ...state, userId: action.payload, cart: storedCart };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const CartProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(cartReducer, { cart: [], userId: null });\r\n\r\n    useEffect(() => {\r\n        if (state.userId) {\r\n            localStorage.setItem(`cart_${state.userId}`, JSON.stringify(state.cart));\r\n        }\r\n    }, [state.cart, state.userId]);\r\n\r\n    return (\r\n        <CartContext.Provider value={{ cart: state.cart, dispatch, setUser: (id) => dispatch({ type: 'SET_USER', payload: id }) }}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useCart = () => useContext(CartContext);\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}